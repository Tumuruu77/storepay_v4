# This file was generated. Do not edit manually.

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"Requires that exactly one field must be supplied and that field must not be `null`."
directive @oneOf on INPUT_OBJECT

"An object with an ID."
interface BaseModelInterface {
  createdAt: ISO8601DateTime!
  "ID of the object."
  id: ID!
  updatedAt: ISO8601DateTime!
}

"An object with an ID."
interface GamificationAction {
  createdAt: ISO8601DateTime!
  gamificationId: ID!
  "ID of the object."
  id: ID!
  preferences: JSON
  type: String!
  updatedAt: ISO8601DateTime!
}

"An object with an ID."
interface GamificationGoal {
  completed: Boolean!
  createdAt: ISO8601DateTime!
  currentCycle: String!
  currentProgress: Progress
  gamificationId: ID!
  "ID of the object."
  id: ID!
  name: String!
  nextCycle: String!
  preferences: JSON
  prevCycle: String!
  prevCycles(size: Int!): [String!]!
  "Returns list of progresses"
  progresses(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: GamificationProgressFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): ProgressConnection!
  repeat: GoalRepeat!
  type: String!
  updatedAt: ISO8601DateTime!
}

"An object with an ID."
interface InvitationInterface {
  acceptedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  email: String
  expiresAt: ISO8601DateTime
  "ID of the object."
  id: ID!
  invitable: Node
  invitee: Node
  inviter: Node
  preferences: JSON!
  status: InvitationStatus!
  updatedAt: ISO8601DateTime!
}

"An object with an ID."
interface LoanInterface {
  amount: Float!
  "Returns list of Audit logs."
  audits: JSON
  balance: Float!
  bankTransactions: [BankTransaction!]
  canceledAt: ISO8601DateTime
  category: Category!
  categoryId: ID
  categoryName: String
  chargeAmount: Float!
  closedAt: ISO8601DateTime
  confirmedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  currency: String!
  description: String
  difAmount: Float!
  endDate: ISO8601DateTime!
  expiredAt: ISO8601DateTime
  externalId: ID
  fareAmount: Float!
  firstPaymentDate: ISO8601Date
  "ID of the object."
  id: ID!
  initialAmount: Float!
  intAmount: Float!
  interestRate: Float!
  interests(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: InterestFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): InterestConnection!
  invoices: [Invoice!]!
  loanModifications: [LoanModification!]!
  loanOverdueTerms: String
  merchant: Merchant!
  merchantId: ID!
  merchantUser: MerchantUser!
  merchantUserId: ID
  modifiedAmount: Float!
  number: String!
  overdueDays: Int
  paidAmount: Float!
  paidAt: ISO8601DateTime
  payMaxAmount: Float
  payMinAmount: Float
  payments: [Payment!]
  paymentsPerMonth: Int!
  penAmount: Float!
  penalties: [Penalty!]!
  penaltyRate: Float!
  preferences: JSON
  principalBalance: Float!
  product: Product!
  productId: ID!
  quality: LoanQuality!
  refundedAt: ISO8601DateTime
  region: Region!
  regionId: ID
  registerNum: String!
  rejectedAt: ISO8601DateTime
  riskScore: Float
  salesTransactions: [Transaction!]!
  serviceName: String!
  settled: Boolean!
  settlementId: ID
  startDate: ISO8601DateTime!
  status: LoanStatus!
  store: Store!
  storeContractNumber: String
  storeFeePercent: Float!
  storeId: ID!
  taxAmount: Float!
  totalAmount: Float
  totalPaidAmount: Float
  totalPaidPenalty: Float
  totalPenalty: Float
  totalPendingInvoiceAmount: Float
  totalUnpaidAmount: Float
  totalUnpaidBalance: Float!
  totalUnpaidPenalty: Float
  type: String!
  updatedAt: ISO8601DateTime!
  user: User
  userId: ID!
  v3Payments: JSON
  verifications: [Verification!]!
  writeOff: Boolean!
  zmsQuality: LoanZmsQuality!
}

"An object with an ID."
interface Node {
  "ID of the object."
  id: ID!
}

"An object with an ID."
interface VerificationInterface {
  amount: Float
  createdAt: ISO8601DateTime!
  description: String
  expiresAt: ISO8601DateTime
  "ID of the object."
  id: ID!
  merchantId: ID
  modifyType: LoanModificationModifyType
  number: String!
  preferences: JSON
  requester: User
  requesterName: String
  respondAt: ISO8601DateTime
  responder: User
  status: VerificationStatus!
  target: Node
  token: String!
  type: String!
  updatedAt: ISO8601DateTime!
}

"An object with an ID."
interface WalletInterface {
  account: String
  availableAmount: Float
  balance: Float
  createdAt: ISO8601DateTime!
  currency: String
  expiresAt: ISO8601DateTime
  freezeAmount: Float
  "ID of the object."
  id: ID!
  lockedAmount: Float
  name: String
  owner: Node
  preferences: JSON
  startsDate: ISO8601DateTime
  status: WalletStatus
  "Returns list of transactions"
  transactions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: WalletTransactionFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): TransactionConnection!
  type: String
  updatedAt: ISO8601DateTime!
}

"Account owner type"
union AccountOwner = Merchant | User

"Union type for Loan, Modification, Settlement or User"
union TransactionSourceUnion = Account | CGW | LoanLong | LoanModification | LoanRegular | Payment | Settlement | Transaction | User | WalletCrypto

type Account implements BaseModelInterface & Node {
  bank: Bank!
  bankId: ID!
  createdAt: ISO8601DateTime!
  currency: String
  iban: String
  "ID of the object."
  id: ID!
  isActive: Boolean
  isConfirm: Boolean
  isDefault: Boolean
  name: String!
  number: String!
  owner: AccountOwner!
  ownerId: ID!
  ownerType: String!
  position: Int
  preferences: JSON
  regionId: ID!
  updatedAt: ISO8601DateTime!
}

type Address implements BaseModelInterface & Node {
  address: String
  apartment: String
  city: String
  country: Country
  countryId: ID
  createdAt: ISO8601DateTime!
  district: District
  districtId: ID
  districtName: String
  "ID of the object."
  id: ID!
  owner: Node
  ownerId: ID!
  ownerType: String
  postalCode: String
  preferences: String
  quarter: Quarter
  quarterId: ID
  quarterName: String
  state: State
  stateId: ID
  street: String
  updatedAt: ISO8601DateTime!
  village: Village
  zipCode: String
}

"Agreements for users & merchants"
type Agreement implements BaseModelInterface & Node {
  audienceKind: AgreementAudienceKind!
  category: AgreementCategory!
  content: String
  createdAt: ISO8601DateTime!
  description: String
  "ID of the object."
  id: ID!
  isActive: Boolean!
  isForce: Boolean!
  preferences: JSON!
  title: String
  updatedAt: ISO8601DateTime!
  version: Int!
}

"The connection type for Agreement."
type AgreementConnection {
  "A list of edges."
  edges: [AgreementEdge!]!
  "A list of nodes."
  nodes: [Agreement!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type AgreementEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Agreement!
}

type ApiLog implements BaseModelInterface & Node {
  createdAt: ISO8601DateTime!
  headers: String
  "ID of the object."
  id: ID!
  preferences: JSON
  request: String
  requestAt: ISO8601DateTime
  requestMethod: String
  response: String
  responseAt: ISO8601DateTime
  targetId: Int
  targetType: String
  updatedAt: ISO8601DateTime!
  url: String
}

"The connection type for ApiLog."
type ApiLogConnection {
  "A list of edges."
  edges: [ApiLogEdge!]!
  "A list of nodes."
  nodes: [ApiLog!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type ApiLogEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ApiLog!
}

type AppVersion implements BaseModelInterface & Node {
  createdAt: ISO8601DateTime!
  deepLink: JSON
  "ID of the object."
  id: ID!
  os: String
  updatedAt: ISO8601DateTime!
  version: String
}

"The connection type for AppVersion."
type AppVersionConnection {
  "A list of edges."
  edges: [AppVersionEdge!]!
  "A list of nodes."
  nodes: [AppVersion!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type AppVersionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: AppVersion!
}

type Article implements BaseModelInterface & Node {
  authorId: ID
  body: String
  category: ArticleCategory
  categoryId: ID
  createdAt: ISO8601DateTime!
  "ID of the object."
  id: ID!
  images: [Image!]!
  isExternal: Boolean!
  isGlobal: Boolean!
  link: String
  position: Int
  publishedAt: ISO8601DateTime
  regionId: ID
  source: String
  status: ArticleArticleStatuses!
  thumbnail: Image
  title: String
  updatedAt: ISO8601DateTime!
  videos: [Attachment!]!
}

type ArticleCategory implements BaseModelInterface & Node {
  "Returns list of Article::Article"
  articles(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: ArticleArticleFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): ArticleConnection
  createdAt: ISO8601DateTime!
  "ID of the object."
  id: ID!
  isActive: Boolean!
  isGlobal: Boolean!
  name: String
  position: Int!
  region: Region
  regionId: ID
  updatedAt: ISO8601DateTime!
}

"The connection type for ArticleCategory."
type ArticleCategoryConnection {
  "A list of edges."
  edges: [ArticleCategoryEdge!]!
  "A list of nodes."
  nodes: [ArticleCategory!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type ArticleCategoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ArticleCategory!
}

"The connection type for Article."
type ArticleConnection {
  "A list of edges."
  edges: [ArticleEdge!]!
  "A list of nodes."
  nodes: [Article!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type ArticleEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Article!
}

"File attachment"
type Attachment {
  attachmentContentType: String
  attachmentFileName: String
  attachmentFileSize(unit: String): Float
  attachmentId: ID
  blob: Blob
  createdAt: ISO8601DateTime
  name: String
  signedId: ID
  url: String
}

"The connection type for Attachment."
type AttachmentConnection {
  "A list of edges."
  edges: [AttachmentEdge!]!
  "A list of nodes."
  nodes: [Attachment!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type AttachmentEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Attachment!
}

type Audit {
  action: String
  associatedId: Int
  associatedType: String
  auditableId: Int
  auditableType: String
  auditedChanges: JSON
  comment: String
  createdAt: ISO8601DateTime
  id: ID
  remoteAddress: String
  requestUuid: String
  userId: Int
  userType: String
  username: String
  version: Int
}

"The connection type for Audit."
type AuditConnection {
  "A list of edges."
  edges: [AuditEdge!]!
  "A list of nodes."
  nodes: [Audit!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type AuditEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Audit!
}

type Bank implements BaseModelInterface & Node {
  code: String!
  createdAt: ISO8601DateTime!
  icon: Image
  "ID of the object."
  id: ID!
  isActive: Boolean!
  name: String!
  preferences: JSON
  regionId: ID!
  swiftCode: String
  updatedAt: ISO8601DateTime!
}

"The connection type for Bank."
type BankConnection {
  "A list of edges."
  edges: [BankEdge!]!
  "A list of nodes."
  nodes: [Bank!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type BankEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Bank!
}

type BankTransaction implements BaseModelInterface & Node {
  account: String
  amount: Float
  cgw: CGW
  createdAt: ISO8601DateTime!
  customDescription: String
  customerAccount: String
  customerBank: String
  customerName: String
  description: String
  "ID of the object."
  id: ID!
  isCaptured: Boolean
  isCredit: Boolean!
  number: String
  preferences: JSON
  ref: String
  target: Node
  targetId: ID
  targetType: String
  transactionDate: ISO8601DateTime
  typeCode: BankTransactionTypeCode
  updatedAt: ISO8601DateTime!
}

type BankTransfer implements BaseModelInterface & Node {
  accountName: String
  accountNumber: String
  amount: Float
  bankCode: String
  cgw: CGW
  cgwId: ID
  createdAt: ISO8601DateTime!
  currency: String
  description: String
  dueDate: ISO8601DateTime
  "ID of the object."
  id: ID!
  number: String!
  preferences: JSON
  response: JSON
  status: BankTransferStatus
  targetId: Int
  targetType: String
  updatedAt: ISO8601DateTime!
}

type Banner implements BaseModelInterface & Node {
  createdAt: ISO8601DateTime!
  data: JSON
  duration: Int
  expiresAt: ISO8601DateTime
  "ID of the object."
  id: ID!
  name: String!
  page: String
  "Associated region"
  region: Region!
  regionId: ID
  showArrow: Boolean
  showIndicators: Boolean
  showThumbnail: Boolean
  status: Boolean!
  type: String
  updatedAt: ISO8601DateTime!
}

"The connection type for Banner."
type BannerConnection {
  "A list of edges."
  edges: [BannerEdge!]!
  "A list of nodes."
  nodes: [Banner!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type BannerEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Banner!
}

type Biometric implements BaseModelInterface & Node {
  createdAt: ISO8601DateTime!
  "ID of the object."
  id: ID!
  publicKey: String!
  updatedAt: ISO8601DateTime!
  user: User!
  userId: ID!
}

"File attachment blob"
type Blob {
  byteSize: Int
  checkSum: String
  contentType: String
  filename: String
  key: String
  metadata: JSON
  serviceName: String
}

type CGW implements BaseModelInterface & Node {
  balance: Float
  createdAt: ISO8601DateTime!
  "ID of the object."
  id: ID!
  isCredit: Boolean!
  minBalance: Float
  name: String!
  preferences: JSON
  status: BankCGWStatus!
  transferAccount: String
  transferPassword: String
  transferUsername: String
  type: String!
  updatedAt: ISO8601DateTime!
}

"The connection type for CGW."
type CGWConnection {
  "A list of edges."
  edges: [CGWEdge!]!
  "A list of nodes."
  nodes: [CGW!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type CGWEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CGW!
}

type Category implements BaseModelInterface & Node {
  children: [Category!]
  createdAt: ISO8601DateTime!
  icon: Image
  "ID of the object."
  id: ID!
  image: Image
  "Merchant associated with the category"
  merchants(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: MerchantFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): MerchantConnection
  "Merchants and categories relation"
  merchantsCategories(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: MerchantsCategoryFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): MerchantsCategoryConnection
  name: String
  parent: Category
  position: Int!
  status: Boolean!
  updatedAt: ISO8601DateTime!
}

"The connection type for Category."
type CategoryConnection {
  "A list of edges."
  edges: [CategoryEdge!]!
  "A list of nodes."
  nodes: [Category!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type CategoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Category!
}

type ConfirmableToken implements BaseModelInterface & Node {
  "App redirect screen for mail OTP confirmation"
  appScreen: String
  attempts: Int!
  confirmable: Node
  confirmedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  expireAt: ISO8601DateTime
  expired: Boolean!
  generatedAt: ISO8601DateTime
  "ID of the object."
  id: ID!
  key: String!
  updatedAt: ISO8601DateTime!
}

type Country implements BaseModelInterface & Node {
  createdAt: ISO8601DateTime!
  currency: String
  geoJson: JSON
  "ID of the object."
  id: ID!
  iso: String
  iso3: String
  isoName: String
  isoNumeric: Int
  name: String
  numCode: Int
  preferences: JSON
  states: [State!]!
  statesRequired: Boolean!
  updatedAt: ISO8601DateTime!
  zipCodeRequired: Boolean!
}

"The connection type for Country."
type CountryConnection {
  "A list of edges."
  edges: [CountryEdge!]!
  "A list of nodes."
  nodes: [Country!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type CountryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Country!
}

type CreditScore implements BaseModelInterface & Node {
  createdAt: ISO8601DateTime!
  creditScoreProduct: CreditScoreProduct
  creditScoreProductId: ID
  currency: CreditScoreCurrency!
  "ID of the object."
  id: ID!
  preferences: JSON
  redirectUrl: String
  regionId: ID
  score: Float!
  statementId: String
  updatedAt: ISO8601DateTime!
  "Owner of the credit score"
  user: User
  userId: ID
}

"The connection type for CreditScore."
type CreditScoreConnection {
  "A list of edges."
  edges: [CreditScoreEdge!]!
  "A list of nodes."
  nodes: [CreditScore!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type CreditScoreEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CreditScore!
}

type CreditScoreProduct implements BaseModelInterface & Node {
  createdAt: ISO8601DateTime!
  creditScore: CreditScore
  "ID of the object."
  id: ID!
  level: Int!
  maxLimit: Float
  minLimit: Float
  name: String!
  productCurrency: CreditScoreProductCurrency!
  productMaxLimit: Float
  productMinLimit: Float
  regionId: ID
  scoreMax: Int
  scoreMin: Int
  updatedAt: ISO8601DateTime!
}

type CreditScoreTransaction implements BaseModelInterface & Node {
  amount: Float!
  balance: Float!
  createdAt: ISO8601DateTime!
  description: String
  "ID of the object."
  id: ID!
  number: String!
  preferences: JSON
  typeCode: CreditScoreTransactionTypeCode!
  updatedAt: ISO8601DateTime!
  "Owner of the credit score"
  user: User
  userId: ID
}

"The connection type for CreditScoreTransaction."
type CreditScoreTransactionConnection {
  "A list of edges."
  edges: [CreditScoreTransactionEdge!]!
  "A list of nodes."
  nodes: [CreditScoreTransaction!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type CreditScoreTransactionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CreditScoreTransaction!
}

type CurrencyRate implements BaseModelInterface & Node {
  baseCurrency: String!
  createdAt: ISO8601DateTime!
  currency: String!
  "ID of the object."
  id: ID!
  price: Float!
  rate: Float
  rateDate: ISO8601DateTime!
  source: String
  updatedAt: ISO8601DateTime!
  updatedDate: ISO8601DateTime!
  user: User
}

"The connection type for CurrencyRate."
type CurrencyRateConnection {
  "A list of edges."
  edges: [CurrencyRateEdge!]!
  "A list of nodes."
  nodes: [CurrencyRate!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type CurrencyRateEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CurrencyRate!
}

type DanCitizenSalary implements BaseModelInterface & Node {
  createdAt: ISO8601DateTime!
  domName: String
  "ID of the object."
  id: ID!
  isPaid: Boolean
  month: Int
  orgName: String
  orgSiId: String
  preferences: JSON
  salaryAmount: Float
  salaryFee: Float
  updatedAt: ISO8601DateTime!
  userId: ID
  year: Int
}

"The connection type for DanCitizenSalary."
type DanCitizenSalaryConnection {
  "A list of edges."
  edges: [DanCitizenSalaryEdge!]!
  "A list of nodes."
  nodes: [DanCitizenSalary!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type DanCitizenSalaryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: DanCitizenSalary!
}

type District implements BaseModelInterface & Node {
  code: String
  createdAt: ISO8601DateTime!
  geoJson: JSON
  "ID of the object."
  id: ID!
  name: String
  preferences: JSON
  quarters: [Quarter!]!
  state: State
  updatedAt: ISO8601DateTime!
}

type DocumentTemplate implements BaseModelInterface & Node {
  classification: DocumentTemplateClassifications!
  createdAt: ISO8601DateTime!
  description: String
  "ID of the object."
  id: ID!
  name: String!
  regionId: ID!
  status: DocumentTemplateStatuses!
  template: Attachment!
  updatedAt: ISO8601DateTime!
}

"The connection type for DocumentTemplate."
type DocumentTemplateConnection {
  "A list of edges."
  edges: [DocumentTemplateEdge!]!
  "A list of nodes."
  nodes: [DocumentTemplate!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type DocumentTemplateEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: DocumentTemplate!
}

type Employee implements BaseModelInterface & InvitationInterface & Node {
  acceptedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  email: String
  expiresAt: ISO8601DateTime
  "ID of the object."
  id: ID!
  invitable: Node
  invitableId: ID
  invitableName: String
  invitee: Node
  inviter: Node
  inviterName: String
  phone: String
  preferences: JSON!
  role: String
  status: InvitationStatus!
  updatedAt: ISO8601DateTime!
  userStatus: String
}

"The connection type for Employee."
type EmployeeConnection {
  "A list of edges."
  edges: [EmployeeEdge!]!
  "A list of nodes."
  nodes: [Employee!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type EmployeeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Employee!
}

type Faq implements BaseModelInterface & Node {
  answer: String
  createdAt: ISO8601DateTime!
  "ID of the object."
  id: ID!
  question: String
  updatedAt: ISO8601DateTime!
}

"The connection type for Faq."
type FaqConnection {
  "A list of edges."
  edges: [FaqEdge!]!
  "A list of nodes."
  nodes: [Faq!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type FaqEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Faq!
}

"Feedback from users & merchants"
type Feedback implements BaseModelInterface & Node {
  category: FeedbackCategory!
  createdAt: ISO8601DateTime!
  description: String
  followUpConsent: Boolean!
  "ID of the object."
  id: ID!
  merchant: Merchant!
  merchantId: ID
  number: String!
  preferences: JSON!
  respondAt: ISO8601DateTime
  responder: User
  response: String
  sender: User
  status: FeedbackStatus!
  systemType: FeedbackSystem!
  updatedAt: ISO8601DateTime!
}

type Gamification implements BaseModelInterface & Node {
  actions: [GamificationAction!]
  active: Boolean!
  createdAt: ISO8601DateTime!
  description: String
  expiresAt: ISO8601DateTime
  goalPolicy: String!
  goals: [GamificationGoal!]
  "ID of the object."
  id: ID!
  "Returns list of loyalty categories"
  loyaltyCategories(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: LoyaltyCategoryFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): UserLoyaltyCategoryConnection
  loyaltyCategoryIds: [ID!]
  name: String!
  preferences: JSON!
  "Returns list of progresses"
  progresses(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: GamificationProgressFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): ProgressConnection
  startsAt: ISO8601DateTime
  updatedAt: ISO8601DateTime!
  visible: Boolean!
}

type GamificationActionChangeCreditScore implements BaseModelInterface & GamificationAction & Node {
  createdAt: ISO8601DateTime!
  gamificationId: ID!
  "ID of the object."
  id: ID!
  preferences: JSON
  type: String!
  updatedAt: ISO8601DateTime!
}

type GamificationActionChangeCryptoWallet implements BaseModelInterface & GamificationAction & Node {
  amount: Float
  changeType: String
  createdAt: ISO8601DateTime!
  description: String
  gamificationId: ID!
  "ID of the object."
  id: ID!
  preferences: JSON
  type: String!
  typeCode: WalletTransactionTypeCode
  updatedAt: ISO8601DateTime!
}

type GamificationActionChangeLoyaltyLevel implements BaseModelInterface & GamificationAction & Node {
  createdAt: ISO8601DateTime!
  gamificationId: ID!
  "ID of the object."
  id: ID!
  preferences: JSON
  type: String!
  updatedAt: ISO8601DateTime!
}

"The connection type for Gamification."
type GamificationConnection {
  "A list of edges."
  edges: [GamificationEdge!]!
  "A list of nodes."
  nodes: [Gamification!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type GamificationEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Gamification!
}

type GamificationGoalLoanProduct implements BaseModelInterface & GamificationGoal & Node {
  completed: Boolean!
  createdAt: ISO8601DateTime!
  currentCycle: String!
  currentProgress: Progress
  gamificationId: ID!
  "ID of the object."
  id: ID!
  name: String!
  nextCycle: String!
  preferences: JSON
  prevCycle: String!
  prevCycles(size: Int!): [String!]!
  productsIds: [ID!]!
  "Returns list of progresses"
  progresses(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: GamificationProgressFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): ProgressConnection!
  repeat: GoalRepeat!
  type: String!
  updatedAt: ISO8601DateTime!
}

type GamificationGoalLoanQuality implements BaseModelInterface & GamificationGoal & Node {
  completed: Boolean!
  createdAt: ISO8601DateTime!
  currentCycle: String!
  currentProgress: Progress
  day1: Int!
  day2: Int
  gamificationId: ID!
  "ID of the object."
  id: ID!
  name: String!
  nextCycle: String!
  operation: String!
  preferences: JSON
  prevCycle: String!
  prevCycles(size: Int!): [String!]!
  "Returns list of progresses"
  progresses(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: GamificationProgressFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): ProgressConnection!
  quality: String!
  repeat: GoalRepeat!
  type: String!
  updatedAt: ISO8601DateTime!
}

type GamificationGoalMerchant implements BaseModelInterface & GamificationGoal & Node {
  completed: Boolean!
  createdAt: ISO8601DateTime!
  currentCycle: String!
  currentProgress: Progress
  gamificationId: ID!
  "ID of the object."
  id: ID!
  merchantIds: [ID!]!
  name: String!
  nextCycle: String!
  preferences: JSON
  prevCycle: String!
  prevCycles(size: Int!): [String!]!
  "Returns list of progresses"
  progresses(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: GamificationProgressFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): ProgressConnection!
  repeat: GoalRepeat!
  type: String!
  updatedAt: ISO8601DateTime!
}

type GamificationGoalPurchaseAmount implements BaseModelInterface & GamificationGoal & Node {
  completed: Boolean!
  createdAt: ISO8601DateTime!
  currentCycle: String!
  currentProgress: Progress
  gamificationId: ID!
  "ID of the object."
  id: ID!
  name: String!
  nextCycle: String!
  preferences: JSON
  prevCycle: String!
  prevCycles(size: Int!): [String!]!
  "Returns list of progresses"
  progresses(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: GamificationProgressFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): ProgressConnection!
  repeat: GoalRepeat!
  type: String!
  updatedAt: ISO8601DateTime!
}

type GamificationGoalPurchaseCount implements BaseModelInterface & GamificationGoal & Node {
  completed: Boolean!
  createdAt: ISO8601DateTime!
  currentCycle: String!
  currentProgress: Progress
  gamificationId: ID!
  "ID of the object."
  id: ID!
  name: String!
  nextCycle: String!
  preferences: JSON
  prevCycle: String!
  prevCycles(size: Int!): [String!]!
  "Returns list of progresses"
  progresses(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: GamificationProgressFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): ProgressConnection!
  repeat: GoalRepeat!
  type: String!
  updatedAt: ISO8601DateTime!
}

type GamificationGoalTotalAmount implements BaseModelInterface & GamificationGoal & Node {
  completed: Boolean!
  createdAt: ISO8601DateTime!
  currentCycle: String!
  currentProgress: Progress
  gamificationId: ID!
  "ID of the object."
  id: ID!
  name: String!
  nextCycle: String!
  preferences: JSON
  prevCycle: String!
  prevCycles(size: Int!): [String!]!
  "Returns list of progresses"
  progresses(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: GamificationProgressFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): ProgressConnection!
  repeat: GoalRepeat!
  type: String!
  updatedAt: ISO8601DateTime!
}

"GuideType for users & merchants"
type Guide implements BaseModelInterface & Node {
  audienceKind: GuideAudienceKind!
  category: GuideCategory!
  createdAt: ISO8601DateTime!
  file: Attachment
  filePreview: Image
  "ID of the object."
  id: ID!
  preferences: JSON!
  title: String!
  updatedAt: ISO8601DateTime!
}

"The connection type for Guide."
type GuideConnection {
  "A list of edges."
  edges: [GuideEdge!]!
  "A list of nodes."
  nodes: [Guide!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type GuideEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Guide!
}

type Image {
  attachmentContentType: String
  attachmentFileName: String
  attachmentFileSize(unit: String): Float
  attachmentId: ID
  blob: Blob
  createdAt: ISO8601DateTime
  name: String
  signedId: ID
  url(
    "Extracts an area from an image. The first two arguments are the left and top edges of area to extract, while the last two arguments are the width and height of the area to extract."
    crop: [Int!],
    format: String,
    "Image quality: 0-100"
    quality: Int = 80,
    "Resizes the image to fit within the specified dimensions while retaining the original aspect ratio. If necessary, will pad the remaining area with transparent color if source image has alpha channel, black otherwise."
    resizeAndPad: [Int!],
    "Resizes the image to fill the specified dimensions while retaining the original aspect ratio. If necessary, will crop the image in the larger dimension."
    resizeToFill: [Int!],
    "Resizes the image to fit within the specified dimensions while retaining the original aspect ratio.Will downsize the image if it's larger than the specified dimensions or upsize if it's smaller."
    resizeToFit: [Int!],
    "Downsizes the image to fit within the specified dimensions while retaining the original aspect ratio.Will only resize the image if it's larger than the specified dimensions."
    resizeToLimit: [Int!]
  ): String
}

type Interest implements BaseModelInterface & Node {
  amount: Float!
  balance: Float!
  capitalizedAt: ISO8601DateTime
  category: String!
  createdAt: ISO8601DateTime!
  dueDate: ISO8601Date!
  "ID of the object."
  id: ID!
  interestDate: ISO8601Date!
  invoice: Invoice
  invoiceId: ID
  loan: LoanRegular!
  loanId: ID!
  paidAt: ISO8601DateTime
  principal: Float!
  product: Product!
  productId: ID!
  rate: Float!
  status: String!
  updatedAt: ISO8601DateTime!
  user: User!
  userId: ID!
}

"The connection type for Interest."
type InterestConnection {
  "A list of edges."
  edges: [InterestEdge!]!
  "A list of nodes."
  nodes: [Interest!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type InterestEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Interest!
}

type Invitation implements BaseModelInterface & InvitationInterface & Node {
  acceptedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  email: String
  expiresAt: ISO8601DateTime
  "ID of the object."
  id: ID!
  invitable: Node
  invitee: Node
  inviter: Node
  preferences: JSON!
  status: InvitationStatus!
  updatedAt: ISO8601DateTime!
}

type Invoice implements BaseModelInterface & Node {
  amount: Float
  balance: Float!
  canRefund: Boolean!
  chargeAmount: Float!
  createdAt: ISO8601DateTime!
  "ID of the object."
  id: ID!
  initialAmount: Float!
  intAmount: Float!
  loan: LoanInterface
  loanId: ID
  merchant: Merchant
  merchantId: ID
  "loan amount decreased amount diff"
  modifyDiffAmount: Float
  number: String!
  overdueDays: Int
  paidAmount: Float
  paidAt: ISO8601DateTime
  paidInterest: Float!
  paidPenalty: Float!
  payDate: ISO8601DateTime!
  payments: [Payment!]!
  penAmount: Float!
  penalties: [Penalty!]!
  percentage: Float
  preferences: JSON
  product: Product
  productId: ID
  "Region associated with the user"
  region: Region!
  regionId: ID
  scheduledIntAmount: Float!
  status: InvoiceStatus
  store: Store
  storeId: ID
  totalAmount: Float
  totalPaid: Float
  totalPaidAmount: Float
  totalPaidPenalty: Float
  totalPenalty: Float
  totalPendingPenaltyAmount: Float
  totalUnpaidPenalty: Float
  updatedAt: ISO8601DateTime!
  user: User
  userId: ID
}

"The connection type for Invoice."
type InvoiceConnection {
  "A list of edges."
  edges: [InvoiceEdge!]!
  "A list of nodes."
  nodes: [Invoice!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type InvoiceEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Invoice!
}

type JobStatus implements BaseModelInterface & Node {
  arguments: JSON
  at: Int
  completedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  errorMessage: String
  file: String
  "ID of the object."
  id: ID!
  jobId: String
  jobType: String
  merchantId: ID
  message: String
  percentComplete: Int
  regionId: ID
  result: JSON
  startedAt: ISO8601DateTime
  status: String!
  storeId: ID
  total: Int
  updatedAt: ISO8601DateTime!
  user: User
  userId: ID
}

type Kyc implements BaseModelInterface & Node {
  bloodType: Blood
  companyAddress: String
  companyName: String
  compareDetail: JSON
  contactRelation: ContactRelation
  contactRelationTwo: ContactRelationTwo
  createdAt: ISO8601DateTime!
  department: String
  departmentEnums: Department
  education: Education
  emergencyContactName: String
  emergencyContactNameTwo: String
  emergencyContactPhone: String
  emergencyContactPhoneTwo: String
  emergencyContactSurname: String
  emergencyContactSurnameTwo: String
  emergencyContacts: JSON
  faceRekognition: JSON
  familyIncome: String
  "ID of the object."
  id: ID!
  incomeEarners: String
  industry: String
  industryEnums: Industry
  ktp: Image
  kycReferenceNo: String
  kycVerifyStatus: String!
  maritalStatus: MaritalStatus
  nationality: String
  newMaritalStatus: String
  number: String!
  numberOfChildren: NumberOfChildren
  partnerReferenceNo: String
  passportAddress: String!
  passportBack: Image
  passportFront: Image
  passportImage: Image
  pep: Pep
  pepEnum: Pep
  pepOrg: String
  pepOrgList: JSON
  pepPosition: String
  pepRelation: String
  pepRelationEnum: PepRelation
  pepStatus: String
  placeOfBirth: String
  position: String
  positionEnums: Position
  preferences: JSON!
  preferredCompanyCity: String
  preferredCompanyPhone: String
  preferredCompanyZipCode: String
  preferredCorporateType: Corporate
  preferredCustomerId: String
  preferredDebtorCode: DebtorCode
  preferredEconomyCode: EconomicSector
  preferredEmergencyContactAddress: String
  preferredEmergencyContactCity: String
  preferredEmergencyContactDistrict: String
  preferredEmergencyContactProvence: String
  preferredEmergencyContactRtRw: String
  preferredEmergencyContactType: Spouse
  preferredEmergencyContactVillage: String
  preferredEmergencyContactZipCode: String
  preferredFullName: String
  preferredHomeDatiCode: DatiCode
  preferredHomePostalCode: PostalCode
  preferredHomeProvence: String
  preferredIdExpirationDate: ISO8601DateTime
  preferredJobId: JobId
  preferredJobTitleId: JobTitleId
  preferredLastEducation: LastEducation
  preferredLivedSince: ISO8601DateTime
  preferredMaritalStatus: MaritalStatusIndonesia
  preferredMonthlyExpense: Float
  preferredPhoneAreaCode: String
  preferredPlaceOfBirthPostalCode: PostalCode
  preferredSpouse: Spouse
  preferredTargetMarket: String
  preferredWorkSince: ISO8601DateTime
  preferredZipCode: String
  reason: String!
  regionId: ID!
  religion: Religion
  result: JSON
  rtRw: String
  salaryIncome: Float
  selfie: Image
  signature: Image
  startingPeriod: StartingPeriod
  targetPath: String
  thirdPartyCode: String
  thirdPartyId: String
  thirdPartyStatus: String
  transactionId: String!
  updatedAt: ISO8601DateTime!
  user: User!
  userId: ID!
}

type Label {
  id: ID!
  name: String!
}

type LoanBss implements BaseModelInterface & LoanInterface & Node {
  amount: Float!
  "Returns list of Audit logs."
  audits: JSON
  balance: Float!
  bankTransactions: [BankTransaction!]
  canceledAt: ISO8601DateTime
  category: Category!
  categoryId: ID
  categoryName: String
  chargeAmount: Float!
  closedAt: ISO8601DateTime
  confirmedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  currency: String!
  description: String
  difAmount: Float!
  endDate: ISO8601DateTime!
  expiredAt: ISO8601DateTime
  externalId: ID
  fareAmount: Float!
  firstPaymentDate: ISO8601Date
  "ID of the object."
  id: ID!
  initialAmount: Float!
  intAmount: Float!
  interestRate: Float!
  interests(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: InterestFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): InterestConnection!
  invoices: [Invoice!]!
  loanModifications: [LoanModification!]!
  loanOverdueTerms: String
  merchant: Merchant!
  merchantId: ID!
  merchantUser: MerchantUser!
  merchantUserId: ID
  modifiedAmount: Float!
  number: String!
  otpStatus: String
  overdueDays: Int
  paidAmount: Float!
  paidAt: ISO8601DateTime
  payMaxAmount: Float
  payMinAmount: Float
  payments: [Payment!]
  paymentsPerMonth: Int!
  penAmount: Float!
  penalties: [Penalty!]!
  penaltyRate: Float!
  preferences: JSON
  principalBalance: Float!
  product: Product!
  productId: ID!
  quality: LoanQuality!
  refundedAt: ISO8601DateTime
  region: Region!
  regionId: ID
  registerNum: String!
  rejectedAt: ISO8601DateTime
  riskScore: Float
  salesTransactions: [Transaction!]!
  serviceName: String!
  settled: Boolean!
  settlementId: ID
  startDate: ISO8601DateTime!
  status: LoanStatus!
  store: Store!
  storeContractNumber: String
  storeFeePercent: Float!
  storeId: ID!
  taxAmount: Float!
  totalAmount: Float
  totalPaidAmount: Float
  totalPaidPenalty: Float
  totalPenalty: Float
  totalPendingInvoiceAmount: Float
  totalUnpaidAmount: Float
  totalUnpaidBalance: Float!
  totalUnpaidPenalty: Float
  type: String!
  updatedAt: ISO8601DateTime!
  user: User
  userId: ID!
  v3Payments: JSON
  verifications: [Verification!]!
  writeOff: Boolean!
  zmsQuality: LoanZmsQuality!
}

type LoanCar implements BaseModelInterface & LoanInterface & Node {
  amount: Float!
  "Returns list of Audit logs."
  audits: JSON
  balance: Float!
  bankTransactions: [BankTransaction!]
  canceledAt: ISO8601DateTime
  category: Category!
  categoryId: ID
  categoryName: String
  chargeAmount: Float!
  closedAt: ISO8601DateTime
  confirmedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  currency: String!
  description: String
  difAmount: Float!
  endDate: ISO8601DateTime!
  expiredAt: ISO8601DateTime
  externalId: ID
  fareAmount: Float!
  firstPaymentDate: ISO8601Date
  "ID of the object."
  id: ID!
  initialAmount: Float!
  intAmount: Float!
  interestRate: Float!
  interests(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: InterestFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): InterestConnection!
  invoices: [Invoice!]!
  loanModifications: [LoanModification!]!
  loanOverdueTerms: String
  merchant: Merchant!
  merchantId: ID!
  merchantUser: MerchantUser!
  merchantUserId: ID
  modifiedAmount: Float!
  number: String!
  overdueDays: Int
  paidAmount: Float!
  paidAt: ISO8601DateTime
  payMaxAmount: Float
  payMinAmount: Float
  payments: [Payment!]
  paymentsPerMonth: Int!
  penAmount: Float!
  penalties: [Penalty!]!
  penaltyRate: Float!
  preferences: JSON
  principalBalance: Float!
  product: Product!
  productId: ID!
  quality: LoanQuality!
  refundedAt: ISO8601DateTime
  region: Region!
  regionId: ID
  registerNum: String!
  rejectedAt: ISO8601DateTime
  riskScore: Float
  salesTransactions: [Transaction!]!
  serviceName: String!
  settled: Boolean!
  settlementId: ID
  startDate: ISO8601DateTime!
  status: LoanStatus!
  store: Store!
  storeContractNumber: String
  storeFeePercent: Float!
  storeId: ID!
  taxAmount: Float!
  totalAmount: Float
  totalPaidAmount: Float
  totalPaidPenalty: Float
  totalPenalty: Float
  totalPendingInvoiceAmount: Float
  totalUnpaidAmount: Float
  totalUnpaidBalance: Float!
  totalUnpaidPenalty: Float
  type: String!
  updatedAt: ISO8601DateTime!
  user: User
  userId: ID!
  v3Payments: JSON
  verifications: [Verification!]!
  writeOff: Boolean!
  zmsQuality: LoanZmsQuality!
}

"The connection type for LoanInterface."
type LoanInterfaceConnection {
  "A list of edges."
  edges: [LoanInterfaceEdge!]!
  "A list of nodes."
  nodes: [LoanInterface!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type LoanInterfaceEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: LoanInterface!
}

type LoanLong implements BaseModelInterface & LoanInterface & Node {
  amount: Float!
  "Returns list of Audit logs."
  audits: JSON
  balance: Float!
  bankTransactions: [BankTransaction!]
  canceledAt: ISO8601DateTime
  category: Category!
  categoryId: ID
  categoryName: String
  chargeAmount: Float!
  closedAt: ISO8601DateTime
  configureSchedule: Boolean
  confirmedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  currency: String!
  description: String
  difAmount: Float!
  endDate: ISO8601DateTime!
  expiredAt: ISO8601DateTime
  externalId: ID
  fareAmount: Float!
  firstPaymentDate: ISO8601Date
  "ID of the object."
  id: ID!
  initialAmount: Float!
  intAmount: Float!
  interestRate: Float!
  interests(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: InterestFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): InterestConnection!
  invoices: [Invoice!]!
  loanModifications: [LoanModification!]!
  loanOverdueTerms: String
  merchant: Merchant!
  merchantId: ID!
  merchantUser: MerchantUser!
  merchantUserId: ID
  modifiedAmount: Float!
  number: String!
  onlineCalcResponse: JSON
  overdueDays: Int
  paidAmount: Float!
  paidAt: ISO8601DateTime
  payMaxAmount: Float
  payMinAmount: Float
  payments: [Payment!]
  paymentsPerMonth: Int!
  penAmount: Float!
  penalties: [Penalty!]!
  penaltyRate: Float!
  preferences: JSON
  principalBalance: Float!
  product: Product!
  productId: ID!
  quality: LoanQuality!
  refundedAt: ISO8601DateTime
  region: Region!
  regionId: ID
  registerNum: String!
  rejectedAt: ISO8601DateTime
  riskScore: Float
  salesTransactions: [Transaction!]!
  serviceName: String!
  settled: Boolean!
  settlementId: ID
  startDate: ISO8601DateTime!
  status: LoanStatus!
  store: Store!
  storeContractNumber: String
  storeFeePercent: Float!
  storeId: ID!
  taxAmount: Float!
  totalAmount: Float
  totalPaidAmount: Float
  totalPaidPenalty: Float
  totalPenalty: Float
  totalPendingInvoiceAmount: Float
  totalUnpaidAmount: Float
  totalUnpaidBalance: Float!
  totalUnpaidPenalty: Float
  type: String!
  updatedAt: ISO8601DateTime!
  user: User
  userId: ID!
  v3Payments: JSON
  verifications: [Verification!]!
  writeOff: Boolean!
  xacAccount: String
  xacClosingBalance: Float
  xacCreditAccount: String
  xacCreditScore: XacCreditScore
  xacFeeAmount: Float
  xacInterest: Float
  xacMessage: String
  xacPenaltyAmount: Float
  xacSchedule: JSON
  xacStatus: String
  zmsQuality: LoanZmsQuality!
}

"The connection type for LoanLong."
type LoanLongConnection {
  "A list of edges."
  edges: [LoanLongEdge!]!
  "A list of nodes."
  nodes: [LoanLong!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type LoanLongEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: LoanLong!
}

type LoanModification implements BaseModelInterface & Node {
  amount: Float!
  createdAt: ISO8601DateTime!
  description: String!
  diffAmount: Float
  "ID of the object."
  id: ID!
  isTransferInitiated: Boolean
  loan: LoanRegular!
  loanId: ID!
  merchant: Merchant!
  merchantId: ID!
  modifyType: LoanModificationModifyType!
  number: String!
  preferences: JSON
  settled: Boolean!
  store: Store!
  storeId: ID!
  updatedAt: ISO8601DateTime!
  user: User!
  userId: ID!
  verification: LoanModificationVerification!
  verificationId: ID
  withdrawStatus: LoanModificationWithdrawStatus!
}

"The connection type for LoanModification."
type LoanModificationConnection {
  "A list of edges."
  edges: [LoanModificationEdge!]!
  "A list of nodes."
  nodes: [LoanModification!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type LoanModificationEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: LoanModification!
}

type LoanModificationVerification implements BaseModelInterface & Node & VerificationInterface {
  airlineFareAmount: Float
  airlinePassengers: JSON
  airlineTaxAmount: Float
  amount: Float
  createdAt: ISO8601DateTime!
  description: String
  expiresAt: ISO8601DateTime
  "ID of the object."
  id: ID!
  loan: LoanInterface
  loanAmount: Float!
  loanId: Int
  loanNumber: String!
  logoUrl: String
  merchantId: ID
  merchantName: String!
  modifyType: LoanModificationModifyType
  number: String!
  preferences: JSON
  purchaseDate: String!
  requestReason: LoanModifyRequestReason!
  requester: User
  requesterName: String
  respondAt: ISO8601DateTime
  responder: User
  status: VerificationStatus!
  storeName: String!
  target: Node
  token: String!
  type: String!
  updatedAt: ISO8601DateTime!
}

"The connection type for LoanModificationVerification."
type LoanModificationVerificationConnection {
  "A list of edges."
  edges: [LoanModificationVerificationEdge!]!
  "A list of nodes."
  nodes: [LoanModificationVerification!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type LoanModificationVerificationEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: LoanModificationVerification!
}

type LoanRegular implements BaseModelInterface & LoanInterface & Node {
  amount: Float!
  "Returns list of Audit logs."
  audits: JSON
  balance: Float!
  bankTransactions: [BankTransaction!]
  canceledAt: ISO8601DateTime
  category: Category!
  categoryId: ID
  categoryName: String
  chargeAmount: Float!
  closedAt: ISO8601DateTime
  confirmedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  currency: String!
  description: String
  difAmount: Float!
  endDate: ISO8601DateTime!
  expiredAt: ISO8601DateTime
  externalId: ID
  fareAmount: Float!
  firstPaymentDate: ISO8601Date
  "ID of the object."
  id: ID!
  initialAmount: Float!
  intAmount: Float!
  interestRate: Float!
  interests(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: InterestFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): InterestConnection!
  invoices: [Invoice!]!
  loanModifications: [LoanModification!]!
  loanOverdueTerms: String
  merchant: Merchant!
  merchantId: ID!
  merchantUser: MerchantUser!
  merchantUserId: ID
  modifiedAmount: Float!
  number: String!
  overdueDays: Int
  paidAmount: Float!
  paidAt: ISO8601DateTime
  payMaxAmount: Float
  payMinAmount: Float
  payments: [Payment!]
  paymentsPerMonth: Int!
  penAmount: Float!
  penalties: [Penalty!]!
  penaltyRate: Float!
  preferences: JSON
  principalBalance: Float!
  product: Product!
  productId: ID!
  quality: LoanQuality!
  refundedAt: ISO8601DateTime
  region: Region!
  regionId: ID
  registerNum: String!
  rejectedAt: ISO8601DateTime
  riskScore: Float
  salesTransactions: [Transaction!]!
  serviceName: String!
  settled: Boolean!
  settlementId: ID
  startDate: ISO8601DateTime!
  status: LoanStatus!
  store: Store!
  storeContractNumber: String
  storeFeePercent: Float!
  storeId: ID!
  taxAmount: Float!
  totalAmount: Float
  totalPaidAmount: Float
  totalPaidPenalty: Float
  totalPenalty: Float
  totalPendingInvoiceAmount: Float
  totalUnpaidAmount: Float
  totalUnpaidBalance: Float!
  totalUnpaidPenalty: Float
  type: String!
  updatedAt: ISO8601DateTime!
  user: User
  userId: ID!
  v3Payments: JSON
  verifications: [Verification!]!
  writeOff: Boolean!
  zmsQuality: LoanZmsQuality!
}

"StorePay Merchant."
type Merchant implements BaseModelInterface & Node {
  address: String!
  brandName: String
  category: Category
  categoryId: ID
  contacts: [String!]
  contract: Attachment
  createdAt: ISO8601DateTime!
  dashboard(dateFrom: ISO8601Date!, dateTo: ISO8601Date!): JSON!
  description: String!
  email: String
  icon: Image
  "ID of the object."
  id: ID!
  image: Image
  isGoFresh: Boolean
  isShow: Boolean
  logo: Image
  name: String!
  phone: String
  receivables: JSON!
  "Region associated with the user"
  region: Region!
  regionId: ID
  relatedCategories: [Category!]
  "Optional slider images"
  sliderImages: [JSON!]
  socialProfiles: JSON
  "List of stores associated with the merchant"
  stores(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: StoreFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): StoreConnection!
  "Sum of all stores associated with the merchant"
  storesCount: Int
  tags: [Tag!]
  timetable: String
  updatedAt: ISO8601DateTime!
}

"The connection type for Merchant."
type MerchantConnection {
  "A list of edges."
  edges: [MerchantEdge!]!
  "A list of nodes."
  nodes: [Merchant!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type MerchantEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Merchant!
}

"StorePay Merchant simplified information"
type MerchantSimple {
  categories: [Label!]!
  categoryId: ID
  categoryName: String
  icon: String
  id: ID!
  image: String
  logo: String
  name: String!
  tags: [Label!]!
}

"StorePay MerchantUser."
type MerchantUser implements BaseModelInterface & Node {
  createdAt: ISO8601DateTime!
  "ID of the object."
  id: ID!
  lastSignInAt: ISO8601DateTime
  merchantId: ID!
  regionId: ID!
  role: MerchantUserRole!
  status: MerchantUserStatus!
  storeId: ID
  updatedAt: ISO8601DateTime!
  userId: ID!
  username: String!
}

type MerchantsCategory implements BaseModelInterface & Node {
  category: Category!
  categoryId: ID!
  createdAt: ISO8601DateTime!
  "ID of the object."
  id: ID!
  merchant: Merchant!
  merchantId: ID!
  updatedAt: ISO8601DateTime!
}

"The connection type for MerchantsCategory."
type MerchantsCategoryConnection {
  "A list of edges."
  edges: [MerchantsCategoryEdge!]!
  "A list of nodes."
  nodes: [MerchantsCategory!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type MerchantsCategoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: MerchantsCategory!
}

type Mutation {
  "Create address for owner"
  addressCreate(
    "Parameters for addressCreate"
    input: addressCreateInput!
  ): Address
  "Accept agreement for user"
  agreementAccept(
    "Parameters for agreementAccept"
    input: agreementAcceptInput!
  ): UserAgreement
  "Create bank account"
  bankAccountCreate(
    "Parameters for bankAccountCreate"
    input: bankAccountCreateInput!
  ): Account
  "Deactivate bank account"
  bankAccountDeactivate(
    "Parameters for bankAccountDeactivate"
    input: bankAccountDeactivateInput!
  ): Account
  "Destroy bank account"
  bankAccountDestroy(
    "Parameters for bankAccountDestroy"
    input: bankAccountDestroyInput!
  ): Boolean
  "Make bank account default"
  bankAccountMakeDefault(
    "Parameters for bankAccountMakeDefault"
    input: bankAccountMakeDefaultInput!
  ): Account
  "Update bank account"
  bankAccountUpdate(
    "Parameters for bankAccountUpdate"
    input: bankAccountUpdateInput!
  ): Account
  "Check account name by account number"
  checkAccountName(
    "Parameters for checkAccountName"
    input: checkAccountNameInput!
  ): String
  "Used to confirm email, phone, etc. If the confirmation is successful, it will return the signed id for approved objects"
  confirmableConfirm(
    "Parameters for confirmableConfirm"
    input: confirmableConfirmInput!
  ): ID
  "Resend confirmation email, phone, etc."
  confirmableResend(
    "Parameters for confirmableResend"
    input: confirmableResendInput!
  ): ID
  createBiometric(
    "Parameters for createBiometric"
    input: createBiometricInput!
  ): Biometric
  "Create credit score calculation"
  creditScoreCalculation(
    "Parameters for creditScoreCalculation"
    input: creditScoreCalculationInput!
  ): CreditScore
  "Start registration flow by email. Returns phone confirmable id. If user already logged in it will add email to user"
  emailRegister(
    "Parameters for emailRegister"
    input: emailRegisterInput!
  ): ID!
  "Create feedback"
  feedbackCreate(
    "Parameters for feedbackCreate"
    input: feedbackCreateInput!
  ): Feedback
  generateCheckSum(
    "Parameters for generateCheckSum"
    input: generateCheckSumInput!
  ): String
  invoiceOverdue(
    "Parameters for invoiceOverdue"
    input: invoiceOverdueInput!
  ): Invoice
  invoicePay(
    "Parameters for invoicePay"
    input: invoicePayInput!
  ): Invoice
  "Check OTP for Mongolia"
  kycCheckOtpMongolia(
    "Parameters for kycCheckOtpMongolia"
    input: kycCheckOtpMongoliaInput!
  ): Kyc
  "Create KYC request for Indonesia"
  kycCreateForIndonesia(
    "Parameters for kycCreateForIndonesia"
    input: kycCreateForIndonesiaInput!
  ): Kyc
  "Create KYC request for Mongolia"
  kycCreateForMongolia(
    "Parameters for kycCreateForMongolia"
    input: kycCreateForMongoliaInput!
  ): Kyc
  "Create KYC request for Mongolia"
  kycCreateForOtpMongolia(
    "Parameters for kycCreateForOtpMongolia"
    input: kycCreateForOtpMongoliaInput!
  ): Kyc
  "Create KYC request for Vietnam region"
  kycCreateForVietnam(
    "Parameters for kycCreateForVietnam"
    input: kycCreateForVietnamInput!
  ): Boolean
  "Destroy KYC"
  kycDestroy(
    "Parameters for kycDestroy"
    input: kycDestroyInput!
  ): Kyc
  "AWS face rekognition execute result"
  kycExecuteResult(
    "Parameters for kycExecuteResult"
    input: kycExecuteResultInput!
  ): Kyc
  "AWS face rekognition"
  kycFaceCompare(
    "Parameters for kycFaceCompare"
    input: kycFaceCompareInput!
  ): Kyc
  "This API is provided to perform ID Data Confirmation of the customer."
  kycLivenessCheckForBss(
    "Parameters for kycLivenessCheckForBss"
    input: kycLivenessCheckForBssInput!
  ): Kyc
  "Create OTP for Mongolia"
  kycOtpGenerateMongolia(
    "Parameters for kycOtpGenerateMongolia"
    input: kycOtpGenerateMongoliaInput!
  ): JSON
  "Recreate KYC request for Mongolia"
  kycRecreateForMongolia(
    "Parameters for kycRecreateForMongolia"
    input: kycRecreateForMongoliaInput!
  ): Kyc
  "Update KYC request for Indonesia"
  kycUpdateForIndonesia(
    "Parameters for kycUpdateForIndonesia"
    input: kycUpdateForIndonesiaInput!
  ): Kyc
  "Update KYC request for Mongolia"
  kycUpdateForMongolia(
    "Parameters for kycUpdateForMongolia"
    input: kycUpdateForMongoliaInput!
  ): Kyc
  "This API is provided to perform ID Data Confirmation of the customer."
  kycUserIdConfirmationForBss(
    "Parameters for kycUserIdConfirmationForBss"
    input: kycUserIdConfirmationForBssInput!
  ): Kyc
  """

  This API is provided to input Customer Information. Partner can send customer
  information to create / onboard customer. During this step, BSS will also perform some
  validations to check the credit score and risk assessment with the data provided from
  Partner
  """
  kycUserInformationFormForBss(
    "Parameters for kycUserInformationFormForBss"
    input: kycUserInformationFormForBssInput!
  ): Kyc
  loanActivateWithoutAdvance(
    "Parameters for loanActivateWithoutAdvance"
    input: loanActivateWithoutAdvanceInput!
  ): LoanInterface
  loanCancel(
    "Parameters for loanCancel"
    input: loanCancelInput!
  ): LoanInterface
  loanCreate(
    "Parameters for loanCreate"
    input: loanCreateInput!
  ): LoanInterface
  "Create loan by merchant"
  loanCreateByMerchant(
    "Parameters for loanCreateByMerchant"
    input: loanCreateByMerchantInput!
  ): LoanInterface
  "Check status from xac"
  loanLongCheck(
    "Parameters for loanLongCheck"
    input: loanLongCheckInput!
  ): LoanLong
  "Create verification for loan modification"
  loanModificationVerificationCreate(
    "Parameters for loanModificationVerificationCreate"
    input: loanModificationVerificationCreateInput!
  ): LoanModificationVerification
  loanReject(
    "Parameters for loanReject"
    input: loanRejectInput!
  ): LoanInterface
  loanUpdate(
    "Parameters for loanUpdate"
    input: loanUpdateInput!
  ): LoanInterface
  loanVerify(
    "Parameters for loanVerify"
    input: loanVerifyInput!
  ): LoanInterface
  "Withdraw overpaid amount loan modification (refunded, amount decreased) of loan from wallet to bank account"
  loanWithdraw(
    "Parameters for loanWithdraw"
    input: loanWithdrawInput!
  ): BankTransfer
  "Start registration flow by phone. Returns phone confirmable id. If user already logged in it will add phone to user"
  mobileRegister(
    "Parameters for mobileRegister"
    input: mobileRegisterInput!
  ): ID!
  "Change user password"
  passwordChange(
    "Parameters for passwordChange"
    input: passwordChangeInput!
  ): User
  "check user's password valid or not"
  passwordCheck(
    "Parameters for passwordCheck"
    input: passwordCheckInput!
  ): Boolean
  "Password forget mutation"
  passwordForget(
    "Parameters for passwordForget"
    input: passwordForgetInput!
  ): ID
  "Set password and create user"
  passwordRegister(
    "Parameters for passwordRegister"
    input: passwordRegisterInput!
  ): ID!
  "Set password and create user for Indonesia"
  passwordRegisterForIndonesia(
    "Parameters for passwordRegisterForIndonesia"
    input: passwordRegisterForIndonesiaInput!
  ): ID!
  "Recreate user password"
  passwordReset(
    "Parameters for passwordReset"
    input: passwordResetInput!
  ): ID
  paymentPaymentCapture(
    "Parameters for paymentPaymentCapture"
    input: paymentPaymentCaptureInput!
  ): Payment
  paymentPaymentCreate(
    "Parameters for paymentPaymentCreate"
    input: paymentPaymentCreateInput!
  ): Payment
  "Register cloud messaging token"
  registerFcmToken(
    "Parameters for registerFcmToken"
    input: registerFcmTokenInput!
  ): ID
  "Register onesignal subscription id"
  registerSubId(
    "Parameters for registerSubId"
    input: registerSubIdInput!
  ): ID
  "Send OTP by email for Indonesia"
  sendOtpByEmailForIndonesia(
    "Parameters for sendOtpByEmailForIndonesia"
    input: sendOtpByEmailForIndonesiaInput!
  ): ID!
  "Send OTP by phone for Indonesia"
  sendOtpByPhoneForIndonesia(
    "Parameters for sendOtpByPhoneForIndonesia"
    input: sendOtpByPhoneForIndonesiaInput!
  ): String
  "user signs contract by privy"
  signUserContract(
    "Parameters for signUserContract"
    input: signUserContractInput!
  ): UserContract
  spcTransfer(
    "Parameters for spcTransfer"
    input: spcTransferInput!
  ): Transaction
  spcWithdraw(
    "Parameters for spcWithdraw"
    input: spcWithdrawInput!
  ): Transaction
  "Update verified"
  userChangeState(
    "Parameters for userChangeState"
    input: userChangeStateInput!
  ): User
  "Check OTP for user that makes risky action"
  userCheckOtpForRiskyAction(
    "Parameters for userCheckOtpForRiskyAction"
    input: userCheckOtpForRiskyActionInput!
  ): Kyc
  "Invite user from merchant and user signup."
  userCreate(
    "Parameters for userCreate"
    input: userCreateInput!
  ): ID
  "Delete user info"
  userDelete(
    "Parameters for userDelete"
    input: userDeleteInput!
  ): User
  userDeviceDestroy(
    "Parameters for userDeviceDestroy"
    input: userDeviceDestroyInput!
  ): Boolean
  userDeviceSendOtp(
    "Parameters for userDeviceSendOtp"
    input: userDeviceSendOtpInput!
  ): ID
  "Disable user"
  userDisable(
    "Parameters for userDisable"
    input: userDisableInput!
  ): User
  "Compare user face with passport image for risky actions"
  userFaceCompareForRiskyAction(
    "Parameters for userFaceCompareForRiskyAction"
    input: userFaceCompareForRiskyActionInput!
  ): User
  userFindByPhone(
    "Parameters for userFindByPhone"
    input: userFindByPhoneInput!
  ): User
  "Generate reference for user"
  userGenerateReference(
    "Parameters for userGenerateReference"
    input: userGenerateReferenceInput!
  ): User
  userGetStatements(
    "Parameters for userGetStatements"
    input: userGetStatementsInput!
  ): CreditScore
  "respond for Verification::LoanModification request"
  userLoanModificationRespond(
    "Parameters for userLoanModificationRespond"
    input: userLoanModificationRespondInput!
  ): ID
  userPinCheck(
    "Parameters for userPinCheck"
    input: userPinCheckInput!
  ): User
  userPinCreate(
    "Parameters for userPinCreate"
    input: userPinCreateInput!
  ): User
  userPinForget(
    "Parameters for userPinForget"
    input: userPinForgetInput!
  ): ID
  userReCreateStatements(
    "Parameters for userReCreateStatements"
    input: userReCreateStatementsInput!
  ): CreditScore
  "Check user passport for risky actions"
  userReadyForRekognition(
    "Parameters for userReadyForRekognition"
    input: userReadyForRekognitionInput!
  ): Boolean
  userRequestCreditScore(
    "Parameters for userRequestCreditScore"
    input: userRequestCreditScoreInput!
  ): CreditScore
  "Detect users with risky actions"
  userRiskyAction(
    "Parameters for userRiskyAction"
    input: userRiskyActionInput!
  ): User
  "Update user info"
  userUpdate(
    "Parameters for UserUpdate"
    input: UserUpdateInput!
  ): User
  "Validate OTP email for Indonesia"
  validateOtpEmailForIndonesia(
    "Parameters for validateOtpEmailForIndonesia"
    input: validateOtpEmailForIndonesiaInput!
  ): ID
  "Validate phone OTP  for Indonesia"
  validateOtpForIndonesia(
    "Parameters for validateOtpForIndonesia"
    input: validateOtpForIndonesiaInput!
  ): ID
  "respond for Verification"
  verificationRespond(
    "Parameters for verificationRespond"
    input: verificationRespondInput!
  ): Verification
  virtualAccountDestroy(
    "Parameters for virtualAccountDestroy"
    input: virtualAccountDestroyInput!
  ): VirtualAccount
  walletCryptoTransactionCreate(
    "Parameters for walletCryptoTransactionCreate"
    input: walletCryptoTransactionCreateInput!
  ): Transaction
  xacCalculate(
    "Parameters for xacCalculate"
    input: xacCalculateInput!
  ): JSON
  xacChangeCreditAccount(
    "Parameters for xacChangeCreditAccount"
    input: xacChangeCreditAccountInput!
  ): LoanLong
  xacCreditScoreCreate(
    "Parameters for xacCreditScoreCreate"
    input: xacCreditScoreCreateInput!
  ): XacCreditScore
  xacCreditScoreRecalculate(
    "Parameters for xacCreditScoreRecalculate"
    input: xacCreditScoreRecalculateInput!
  ): XacCreditScore
  xacCreditScoreStatusCheck(
    "Parameters for xacCreditScoreStatusCheck"
    input: xacCreditScoreStatusCheckInput!
  ): XacCreditScore
  xacFindOrCreateAccounts(
    "Parameters for xacFindOrCreateAccounts"
    input: xacFindOrCreateAccountsInput!
  ): [Account!]
  xacKycCheck(
    "Parameters for xacKycCheck"
    input: xacKycCheckInput!
  ): JSON
  xacLoanInvoiceCreate(
    "Parameters for xacLoanInvoiceCreate"
    input: xacLoanInvoiceCreateInput!
  ): Invoice
}

type Notification implements BaseModelInterface & Node {
  appUrl: String
  createdAt: ISO8601DateTime!
  data: JSON
  eventId: ID
  "ID of the object."
  id: ID!
  message: String
  readAt: ISO8601DateTime
  recipientId: ID
  recipientType: String
  recordId: ID
  recordType: String
  seenAt: ISO8601DateTime
  title: String
  type: String
  updatedAt: ISO8601DateTime!
  webUrl: String
}

"The connection type for Notification."
type NotificationConnection {
  "A list of edges."
  edges: [NotificationEdge!]!
  "A list of nodes."
  nodes: [Notification!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type NotificationEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Notification!
}

"Information about pagination in a connection."
type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

type Payment implements BaseModelInterface & Node {
  amount: Float
  captured: Boolean!
  createdAt: ISO8601DateTime!
  cvvResponseMessage: String
  "ID of the object."
  id: ID!
  "Return Associated Payment method"
  method: PaymentMethod
  methodFee: Float
  methodId: ID
  number: String
  owner: Node
  ownerId: ID
  ownerType: String
  preferences: JSON
  "Return Associated Region"
  region: Region
  regionId: ID
  "Return Associated Payment source"
  source: PaymentSource
  sourceId: ID
  state: PaymentState
  target: Node
  targetId: ID
  targetType: String
  updatedAt: ISO8601DateTime!
}

type PaymentMethod implements BaseModelInterface & Node {
  createdAt: ISO8601DateTime!
  currency: String
  description: String
  feeAmount: Float
  feeType: String
  "ID of the object."
  id: ID!
  image: Image
  name: String!
  preferences: JSON
  region: Region
  regionId: ID
  status: MethodStatus!
  type: String!
  updatedAt: ISO8601DateTime!
}

"The connection type for PaymentMethod."
type PaymentMethodConnection {
  "A list of edges."
  edges: [PaymentMethodEdge!]!
  "A list of nodes."
  nodes: [PaymentMethod!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type PaymentMethodEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PaymentMethod!
}

type PaymentSource implements BaseModelInterface & Node {
  createdAt: ISO8601DateTime!
  customerProfileId: String
  "ID of the object."
  id: ID!
  idx: String
  idx2: String
  preferences: JSON
  qrData: String
  type: String
  updatedAt: ISO8601DateTime!
  "Return Associated User"
  user: User!
  userId: ID!
}

"The connection type for PaymentSource."
type PaymentSourceConnection {
  "A list of edges."
  edges: [PaymentSourceEdge!]!
  "A list of nodes."
  nodes: [PaymentSource!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type PaymentSourceEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PaymentSource!
}

type Penalty implements BaseModelInterface & Node {
  amount: Float
  balance: Float!
  category: PenaltyCategory
  createdAt: ISO8601DateTime!
  "ID of the object."
  id: ID!
  invoice: Invoice
  invoiceId: ID
  loan: LoanInterface
  loanId: ID
  paidAmount: Float!
  paidAt: ISO8601DateTime
  penaltyDate: ISO8601DateTime
  preferences: JSON
  status: PenaltyStatus
  updatedAt: ISO8601DateTime!
}

type Product implements BaseModelInterface & Node {
  advancePercent: Float
  advanceSpcPercent: Float
  chargePercent: Float!
  createdAt: ISO8601DateTime!
  dedicatedClass: String
  description: String
  divisionPeriod: Int!
  duration: Int
  durationUnit: DurationUnit!
  hasAdvance: Boolean
  icon: Image
  "ID of the object."
  id: ID!
  image: Image
  isAdvanceSpc: Boolean
  isLockSpc: Boolean
  maxChargeAmount: Float!
  maxLoanAmount: Int
  minChargeAmount: Float!
  minLoanAmount: Int
  name: String!
  position: Int!
  preferences: JSON
  regionId: Int!
  status: ProductStatus!
  updatedAt: ISO8601DateTime!
}

"The connection type for Product."
type ProductConnection {
  "A list of edges."
  edges: [ProductEdge!]!
  "A list of nodes."
  nodes: [Product!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type ProductEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Product!
}

type Progress implements BaseModelInterface & Node {
  amount: Float!
  amountChange: Float
  complete: Boolean!
  createdAt: ISO8601DateTime!
  cycle: String!
  date: ISO8601DateTime!
  gamification: Gamification!
  goal: GamificationGoal!
  "ID of the object."
  id: ID!
  owner: Node!
  percentage: Float!
  percentageChange: Float
  preferences: JSON
  target: Node!
  updatedAt: ISO8601DateTime!
}

"The connection type for Progress."
type ProgressConnection {
  "A list of edges."
  edges: [ProgressEdge!]!
  "A list of nodes."
  nodes: [Progress!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type ProgressEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Progress!
}

type Quarter implements BaseModelInterface & Node {
  code: String
  createdAt: ISO8601DateTime!
  district: District
  geoJson: JSON
  "ID of the object."
  id: ID!
  name: String
  preferences: JSON
  updatedAt: ISO8601DateTime!
}

type Query {
  "Returns list of agreements"
  agreements(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: AgreementFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): AgreementConnection!
  "Returns all merchant information in simplified form"
  allMerchants: [MerchantSimple!]!
  "Returns list of app versions"
  appVersions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: AppVersionFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): AppVersionConnection
  "Returns list of Article::Article"
  articleArticles(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: ArticleArticleFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): ArticleConnection!
  "Return a list of article categories"
  articleCategories(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: ArticleCategoryFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): ArticleCategoryConnection!
  "Returns list of bank"
  banks(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: BankFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): BankConnection!
  "Returns list of banners"
  banners(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: BannerFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): BannerConnection!
  "Return a list of categories"
  categories(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: CategoryFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): CategoryConnection!
  categoriesTree: JSON
  "Returns list of bank cgw"
  cgws(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: CGWFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): CGWConnection!
  "Return a confirmation detail info"
  confirmation(id: ID!): ConfirmableToken
  "Return a confirmable detail info by token"
  confirmationToken(token: String!): ConfirmableToken
  "Return contracts of user, template by region"
  contracts(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: ContractFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): UserContractConnection!
  "Returns list of country"
  countries(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: CountryFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): CountryConnection!
  "Returns list of CurrencyRate"
  currencies(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: CurrencyRateFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): CurrencyRateConnection!
  "Returns list of document templates for contract"
  documentTemplates(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: DocumentTemplateFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): DocumentTemplateConnection!
  "Returns list of documentations"
  documentations(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: UserDocumentationFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): UserDocumentationConnection!
  "Return list of invitations as employee"
  employeeInvitations(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: InvitationFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): EmployeeConnection!
  "Returns list of faqs"
  faqs(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: FaqFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): FaqConnection!
  "Returns list of progresses"
  gamificationProgresses(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: GamificationProgressFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): ProgressConnection!
  "Returns list of gamifications"
  gamifications(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: GamificationFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): GamificationConnection!
  "Returns list of guides"
  guides(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: GuideFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): GuideConnection!
  "Return a invitation detail info"
  invitation(token: String!): Invitation
  "Returns list of invoices"
  invoices(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: InvoiceFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): InvoiceConnection!
  "Return the last CurrencyRate record"
  lastCurrencyRate: CurrencyRate
  "Returns a list of loan modification"
  loanModifications(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: ModificationsFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): LoanModificationConnection!
  "Return list of loan modify verifications"
  loanModifyVerifications(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: LoanModificationVerificationFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): LoanModificationVerificationConnection!
  "Returns list of wallet products"
  loanProducts(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: ProductFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): ProductConnection!
  "Returns list of loyalty categories"
  loyaltyCategories(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: LoyaltyCategoryFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): UserLoyaltyCategoryConnection!
  "Return current logged in user info"
  me: User
  "Returns list of Merchants"
  merchants(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: MerchantFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): MerchantConnection!
  "Fetches an object given its ID."
  node(
    "ID of the object."
    id: ID!
  ): Node
  "Fetches a list of objects given a list of IDs."
  nodes(
    "ID of the object."
    ids: [ID!]!
  ): [Node!]
  "Returns list of payment methods"
  paymentMethods(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: PaymentMethodFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): PaymentMethodConnection!
  "Returns list of payment sources"
  paymentSources(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: PaymentSourceFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): PaymentSourceConnection!
  "Returns list of phones"
  phones(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: PhoneFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): UserPhoneConnection!
  "Returns list of regions"
  regions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: RegionFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): RegionConnection!
  "Returns list of files"
  spFiles(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: SpFileFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): SpFileConnection!
  store(id: ID!): Store
  "Returns list of Merchants"
  stores(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: StoreFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): StoreConnection!
  "Returns list of Merchant Tags"
  tags(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: TagFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): TagConnection!
  "Returns list of users"
  users(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: UserFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): UserConnection!
  "Return VAT payer info"
  vatPayerInfo(registerNumber: String!): JSON
  "Return list of verifications"
  verifications(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: VerificationFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): VerificationConnection!
  xac: XacApi
}

type Region implements BaseModelInterface & Node {
  country: String!
  createdAt: ISO8601DateTime!
  currency: String!
  "ID of the object."
  id: ID!
  language: String!
  locale: String!
  name: String!
  phoneCode: String!
  timezone: String!
  updatedAt: ISO8601DateTime!
  utcOffset: Int!
}

"The connection type for Region."
type RegionConnection {
  "A list of edges."
  edges: [RegionEdge!]!
  "A list of nodes."
  nodes: [Region!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type RegionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Region!
}

"Settlement for merchant stores"
type Settlement implements BaseModelInterface & Node {
  createdAt: ISO8601DateTime!
  description: String
  feeAmount: Float
  "ID of the object."
  id: ID!
  isTransferInitiated: Boolean
  merchantId: ID
  number: String!
  preferences: JSON
  refundAmount: Float
  regionId: ID
  salesAmount: Float
  settlementDate: ISO8601DateTime!
  status: SettlementStatus!
  storeId: ID
  systemFeeAmount: Float
  taxAmount: Float
  transferAmount: Float
  transferredDate: ISO8601DateTime
  type: String
  updatedAt: ISO8601DateTime!
}

"SP file type"
type SpFile implements Node {
  byteSize(unit: String): Float
  contentType: String
  file: Attachment
  filename: String
  "ID of the object."
  id: ID!
  image: Image
  url: String!
}

"The connection type for SpFile."
type SpFileConnection {
  "A list of edges."
  edges: [SpFileEdge!]!
  "A list of nodes."
  nodes: [SpFile!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type SpFileEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: SpFile!
}

type State implements BaseModelInterface & Node {
  code: String
  country: Country
  createdAt: ISO8601DateTime!
  districts: [District!]!
  geoJson: JSON
  "ID of the object."
  id: ID!
  name: String
  preferences: JSON
  updatedAt: ISO8601DateTime!
}

"StorePay Store."
type Store implements BaseModelInterface & Node {
  address: String
  availableProductIds: [Int!]
  "Category associated with the store"
  category: Category!
  categoryId: ID
  createdAt: ISO8601DateTime!
  description: String!
  email: String!
  "ID of the object."
  id: ID!
  isActive: Boolean!
  isShow: Boolean!
  latitude: Float
  longitude: Float
  "Merchant associated with the store"
  merchant: Merchant!
  merchantId: ID!
  name: String!
  phone: String!
  region: Region!
  regionId: ID
  socialProfiles: JSON
  timetable: String!
  updatedAt: ISO8601DateTime!
}

"The connection type for Store."
type StoreConnection {
  "A list of edges."
  edges: [StoreEdge!]!
  "A list of nodes."
  nodes: [Store!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type StoreEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Store!
}

type Subscription {
  "Invoice subscription"
  invoice(id: ID!): Invoice
  "When background job progress updates"
  jobUpdated(id: ID!): JobStatus
  "Trigger to listening loan subscribers when loan updated"
  loan(id: ID!): LoanInterface
  "Loan verification for responder subscription"
  loanVerification(id: ID!): LoanModificationVerification
  "Trigger to user when loan created"
  pendingLoan(userId: ID!): LoanInterface
  "Refresh merchants web loans list"
  storeHaveToRefresh(id: ID!): Boolean!
  "User state subscription"
  userState(id: ID!): User
  "A notification was added"
  xacCreditScore(id: ID!): XacCreditScore
  "A notification was added"
  xacLoanSubscription(id: ID!): LoanLong
}

"StorePay Merchant Tag."
type Tag implements BaseModelInterface & Node {
  createdAt: ISO8601DateTime!
  "ID of the object."
  id: ID!
  "Returns list of Merchants"
  merchants(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: MerchantFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): MerchantConnection
  name: String
  position: Int!
  region: Region
  regionId: ID
  status: Boolean!
  updatedAt: ISO8601DateTime!
}

"The connection type for Tag."
type TagConnection {
  "A list of edges."
  edges: [TagEdge!]!
  "A list of nodes."
  nodes: [Tag!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type TagEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Tag!
}

type Transaction implements BaseModelInterface & Node {
  amount: Float
  archived: Boolean!
  authorizedAt: ISO8601DateTime
  authorizedBy: User
  authorizedById: ID
  authorizedUsername: String
  balance: Float
  bankTransfer: BankTransfer
  category: TransactionCategory
  createdAt: ISO8601DateTime!
  description: String
  due: ISO8601DateTime
  dueDate: ISO8601DateTime
  icon: Image
  "ID of the object."
  id: ID!
  image: Image
  merchantFee: Float
  name: String
  number: String!
  preferences: JSON
  relatedAccount: String
  relatedAccountName: String
  relatedBank: String
  "Returns list of settlement transactions"
  sales(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: WalletTransactionFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): TransactionConnection!
  source: TransactionSourceUnion
  sourceId: ID
  sourceType: String
  status: TransactionStatus!
  transactionAt: ISO8601DateTime
  transactionFee: Float
  typeCode: WalletTransactionTypeCode
  updatedAt: ISO8601DateTime!
  user: User
  wallet: WalletInterface!
  walletId: ID!
  walletType: TransactionWalletType!
  withdrawTransaction: Transaction
  withdrawTransactionId: ID
}

"The connection type for Transaction."
type TransactionConnection {
  "A list of edges."
  edges: [TransactionEdge!]!
  "A list of nodes."
  nodes: [Transaction!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type TransactionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Transaction!
}

"Representation of a StorePay user."
type User implements BaseModelInterface & Node {
  address: Address
  "Returns list of Audit logs."
  audits(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): AuditConnection
  availableLoanProducts: [Product!]
  avatar: Image
  b2bContacts: JSON
  bankAccount: Account
  bankAccounts: [Account!]
  banks: [Bank!]
  birthday: ISO8601Date
  cifNumber: String
  citizenIdNumber: String
  citizenship: String
  civilId: String
  confirmDevice: Boolean
  confirmed: Boolean
  confirmedAt: ISO8601DateTime
  "List of contracts associated with the user"
  contracts(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: ContractFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): UserContractConnection!
  createdAt: ISO8601DateTime!
  "Returns list of credit scores"
  creditScores(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): CreditScoreConnection!
  "Returns list of credit score transactions"
  creditTransactions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: TransactionFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): CreditScoreTransactionConnection!
  currentLimit: Float
  currentSignInAt: ISO8601DateTime
  currentSignInIp: String
  dailyCurrentLimit: Float
  dailyLimit: Float
  dailyUsedLimit: Float
  "Returns list of dan citizen salaries"
  danCitizenSalaryInfos(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): DanCitizenSalaryConnection!
  "Returns list of devices"
  devices(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: DeviceFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): UserDeviceConnection
  email: String
  faceCompare: Boolean
  faceIdToken: String
  failedAttempts: Int
  failedPinAttempts: Int
  familyName: String
  "Fiat wallet associated with the user"
  fiatWallet: WalletFiat
  firstName: String
  fullName: String
  gender: Gender
  "ID of the object."
  id: ID!
  "Returns list of invoices"
  invoices(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: InvoiceFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): InvoiceConnection!
  isCompany: Boolean
  isSpecial: Boolean
  kyc(state: String): Kyc
  kycs(last: Int!): [Kyc!]
  language: String
  lastName: String
  lastSignInAt: ISO8601DateTime
  lastSignInIp: String
  levelId: Int
  "Returns list of loans"
  loans(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: LoanFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): LoanInterfaceConnection!
  lockedAt: ISO8601DateTime
  loyaltyCategory: UserLoyaltyCategory
  maxLimit: Float
  middleName: String
  nationality: String
  "Agreements that the user has not yet accepted"
  needAcceptAgreements: [Agreement!]!
  note: String
  "Returns list of notifications"
  notifications(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): NotificationConnection
  phone: String
  pin: String
  pinBlockedAt: ISO8601DateTime
  "Returns list of attachment"
  references(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: AttachmentFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): AttachmentConnection
  region: Region!
  regionId: ID
  rekognitionAttempt: Float
  rekognitionFlow: String
  rememberCreatedAt: ISO8601DateTime
  resetPass: Boolean
  riskScore: Float
  shortName: String
  signInCount: Int
  spcBaseLimit: Float
  "Crypto wallet associated with the user"
  spcWallet: WalletCrypto
  state: KycState
  status: Status
  totalCreditScoreTransactions: Float
  totalDebitScoreTransactions: Float
  updatedAt: ISO8601DateTime!
  "Returns list of api_logs"
  urtaarLogs(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: ApiLogFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): ApiLogConnection
  usedLimit: Float
  userAddress: String
  userEmails: [UserEmail!]!
  userPhones: [UserPhone!]!
  username: String
  virtualAccounts: [VirtualAccount!]
  "Returns list of transactions"
  walletTransactions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: WalletTransactionFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): TransactionConnection!
  xacCreditScore: XacCreditScore
  "Returns list of credit scores"
  xacCreditScores(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: XacCreditScoreFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): XacCreditScoreConnection!
  "Returns list of xac_loans"
  xacLoans(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: LoanFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): LoanLongConnection!
}

type UserAgreement implements BaseModelInterface & Node {
  agreementId: ID!
  createdAt: ISO8601DateTime!
  id: ID!
  updatedAt: ISO8601DateTime!
  version: Int!
}

"The connection type for User."
type UserConnection {
  "A list of edges."
  edges: [UserEdge!]!
  "A list of nodes."
  nodes: [User!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

type UserContract implements BaseModelInterface & Node {
  contractReference: String
  createdAt: ISO8601DateTime!
  description: String
  document: Attachment
  documentTemplateId: ID
  "ID of the object."
  id: ID!
  magicLink: String
  name: String
  preferences: JSON
  privyId: String
  regionId: ID
  signedAt: ISO8601DateTime
  status: UserContractStatus!
  updatedAt: ISO8601DateTime!
  userId: ID
}

"The connection type for UserContract."
type UserContractConnection {
  "A list of edges."
  edges: [UserContractEdge!]!
  "A list of nodes."
  nodes: [UserContract!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type UserContractEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: UserContract!
}

type UserDevice implements BaseModelInterface & Node {
  channel: DeviceChannel
  confirmed: Boolean
  confirmedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  deviceId: String
  "ID of the object."
  id: ID!
  ip: String
  name: String
  updatedAt: ISO8601DateTime!
  user: User
  userId: ID
}

"The connection type for UserDevice."
type UserDeviceConnection {
  "A list of edges."
  edges: [UserDeviceEdge!]!
  "A list of nodes."
  nodes: [UserDevice!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type UserDeviceEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: UserDevice!
}

type UserDocumentation implements BaseModelInterface & Node {
  body: String
  createdAt: ISO8601DateTime!
  "ID of the object."
  id: ID!
  name: String
  updatedAt: ISO8601DateTime!
}

"The connection type for UserDocumentation."
type UserDocumentationConnection {
  "A list of edges."
  edges: [UserDocumentationEdge!]!
  "A list of nodes."
  nodes: [UserDocumentation!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type UserDocumentationEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: UserDocumentation!
}

"An edge in a connection."
type UserEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: User!
}

type UserEmail implements BaseModelInterface & Node {
  confirmed: Boolean!
  confirmedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  email: String!
  "ID of the object."
  id: ID!
  isDefault: Boolean!
  updatedAt: ISO8601DateTime!
  userId: ID
}

type UserLoyaltyCategory implements BaseModelInterface & Node {
  active: Boolean
  createdAt: ISO8601DateTime!
  description: String
  gamificationIds: [ID!]!
  "Returns list of gamifications"
  gamifications(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: GamificationFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): GamificationConnection
  "ID of the object."
  id: ID!
  image: Image
  isB2b: Boolean
  name: String!
  preferences: JSON
  updatedAt: ISO8601DateTime!
  "Returns list of users"
  users(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: UserFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): UserConnection
}

"The connection type for UserLoyaltyCategory."
type UserLoyaltyCategoryConnection {
  "A list of edges."
  edges: [UserLoyaltyCategoryEdge!]!
  "A list of nodes."
  nodes: [UserLoyaltyCategory!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type UserLoyaltyCategoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: UserLoyaltyCategory!
}

type UserPhone implements BaseModelInterface & Node {
  carrier: String
  confirmed: Boolean!
  confirmedAt: ISO8601DateTime
  countryCode: String!
  createdAt: ISO8601DateTime!
  "ID of the object."
  id: ID!
  isDefault: Boolean!
  phone: String!
  updatedAt: ISO8601DateTime!
  userId: ID
}

"The connection type for UserPhone."
type UserPhoneConnection {
  "A list of edges."
  edges: [UserPhoneEdge!]!
  "A list of nodes."
  nodes: [UserPhone!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type UserPhoneEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: UserPhone!
}

type Verification implements BaseModelInterface & Node & VerificationInterface {
  amount: Float
  createdAt: ISO8601DateTime!
  description: String
  expiresAt: ISO8601DateTime
  "ID of the object."
  id: ID!
  merchantId: ID
  modifyType: LoanModificationModifyType
  number: String!
  preferences: JSON
  requester: User
  requesterName: String
  respondAt: ISO8601DateTime
  responder: User
  status: VerificationStatus!
  target: Node
  token: String!
  type: String!
  updatedAt: ISO8601DateTime!
}

"The connection type for Verification."
type VerificationConnection {
  "A list of edges."
  edges: [VerificationEdge!]!
  "A list of nodes."
  nodes: [Verification!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type VerificationEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Verification!
}

type Village implements BaseModelInterface & Node {
  code: String
  createdAt: ISO8601DateTime!
  geoJson: JSON
  "ID of the object."
  id: ID!
  name: String
  preferences: JSON
  quarter: Quarter
  updatedAt: ISO8601DateTime!
}

type VirtualAccount implements BaseModelInterface & Node {
  accountNumber: String
  accountType: VirtualAccountPayment
  activationDate: ISO8601DateTime
  createdAt: ISO8601DateTime!
  "ID of the object."
  id: ID!
  loanId: ID!
  originalAmount: Float
  outstandingAmount: Float
  status: VirtualAccountStatus
  updatedAt: ISO8601DateTime!
  user: User!
  userId: ID!
}

type WalletCrypto implements BaseModelInterface & Node & WalletInterface {
  account: String
  availableAmount: Float
  balance: Float
  createdAt: ISO8601DateTime!
  currency: String
  expiresAt: ISO8601DateTime
  freezeAmount: Float
  "ID of the object."
  id: ID!
  lockedAmount: Float
  name: String
  owner: Node
  preferences: JSON
  startsDate: ISO8601DateTime
  status: WalletStatus
  "Returns list of transactions"
  transactions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: WalletTransactionFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): TransactionConnection!
  type: String
  updatedAt: ISO8601DateTime!
}

type WalletFiat implements BaseModelInterface & Node & WalletInterface {
  account: String
  availableAmount: Float
  balance: Float
  createdAt: ISO8601DateTime!
  currency: String
  expiresAt: ISO8601DateTime
  freezeAmount: Float
  "ID of the object."
  id: ID!
  lockedAmount: Float
  name: String
  owner: Node
  preferences: JSON
  startsDate: ISO8601DateTime
  status: WalletStatus
  "Returns list of transactions"
  transactions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: WalletTransactionFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): TransactionConnection!
  type: String
  updatedAt: ISO8601DateTime!
}

type WalletSettlement implements BaseModelInterface & Node & WalletInterface {
  account: String
  availableAmount: Float
  balance: Float
  createdAt: ISO8601DateTime!
  currency: String
  expiresAt: ISO8601DateTime
  freezeAmount: Float
  "ID of the object."
  id: ID!
  lockedAmount: Float
  name: String
  owner: Node
  preferences: JSON
  startsDate: ISO8601DateTime
  status: WalletStatus
  "Returns list of transactions"
  transactions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    filter: WalletTransactionFilter,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Returns the elements skipping _n_ from the list."
    offset: Int,
    "Sorting functionality"
    sort: SortFilter
  ): TransactionConnection!
  type: String
  updatedAt: ISO8601DateTime!
}

type XacApi {
  "Return xac account statements"
  accountStatements(
    "Loan id"
    id: ID!
  ): JSON
  "Return xac conditions"
  conditions: JSON
  "Return xac form data"
  creditScoreFields: JSON
}

type XacCreditScore implements BaseModelInterface & Node {
  address: String
  amount: Float
  businessSector: String
  canCreateNew: Boolean
  createdAt: ISO8601DateTime!
  currentAccount: String
  expiresAt: ISO8601DateTime
  feeAmount: Float
  feeFree: Boolean
  feePaidAt: ISO8601DateTime
  "ID of the object."
  id: ID!
  joblessMembers: String
  loan: LoanLong
  message: String
  preferences: JSON
  request: JSON
  response: JSON
  status: XacCreditScoreStatus
  updatedAt: ISO8601DateTime!
  user: User
  userId: ID
  worksCount: Int
  workspan: String
}

"The connection type for XacCreditScore."
type XacCreditScoreConnection {
  "A list of edges."
  edges: [XacCreditScoreEdge!]!
  "A list of nodes."
  nodes: [XacCreditScore!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  sum(field: String!): Float!
  totalCount: Int!
}

"An edge in a connection."
type XacCreditScoreEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: XacCreditScore!
}

enum AgreementAudienceKind {
  "admin"
  admin
  "everyone"
  everyone
  "merchant"
  merchant
  "user"
  user
}

enum AgreementCategory {
  "contract"
  contract
  "term"
  term
}

enum ArticleArticleStatuses {
  "archived"
  archived
  "draft"
  draft
  "published"
  published
}

enum BankCGWStatus {
  "active"
  active
  "failed"
  failed
  "inactive"
  inactive
  "out_of_balance"
  out_of_balance
}

enum BankTransactionTypeCode {
  "credit"
  credit
  "debit"
  debit
}

enum BankTransferStatus {
  "failed"
  failed
  "pending"
  pending
  "sending"
  sending
  "sent"
  sent
}

enum Blood {
  a
  ab
  b
  negative
  o
  tidak_diketahui
}

enum ContactRelation {
  "Child"
  child
  "Colleague"
  colleague
  "Family"
  family
  "Friend"
  friend
  "Husband or wife"
  husband_or_wife
  "Neighbour"
  neighbour
  "Other"
  other
  "Other Family Members"
  other_family_members
  "Partner"
  partner
  "Sibling"
  sibling
}

enum ContactRelationTwo {
  "Child"
  child
  "Colleague"
  colleague
  "Family"
  family
  "Friend"
  friend
  "Husband or wife"
  husband_or_wife
  "Neighbour"
  neighbour
  "Other"
  other
  "Other Family Members"
  other_family_members
  "Partner"
  partner
  "Sibling"
  sibling
}

enum Corporate {
  cv
  pt
}

enum CreditScoreCurrency {
  CURRENCY_IDR
  CURRENCY_MNT
}

enum CreditScoreProductCurrency {
  IDR
  MNT
  USD
}

enum CreditScoreTransactionTypeCode {
  CREDIT
  DEBIT
}

enum DatiCode {
  di_luar_indonesia
  di_yogyakarta
  dki_jaya
  kab_aceh_barat
  kab_aceh_barat_daya
  kab_aceh_besar
  kab_aceh_jaya
  kab_aceh_jeumpa_bireuen
  kab_aceh_selatan
  kab_aceh_simeuleu
  kab_aceh_singkil
  kab_aceh_tamiang
  kab_aceh_tengah
  kab_aceh_tenggara
  kab_aceh_timur
  kab_aceh_utara
  kab_agam
  kab_alor
  kab_anambas
  kab_asahan
  kab_asmat
  kab_badung
  kab_balangan
  kab_bandung
  kab_bandung_barat
  kab_banggai_laut
  kab_bangka
  kab_bangka_barat
  kab_bangka_belitung_kota_pangkal_pinang
  kab_bangka_selatan
  kab_bangka_tengah
  kab_bangkalan
  kab_bangli
  kab_banjar
  kab_banjarnegara
  kab_bantaeng
  kab_bantul
  kab_banyuasin
  kab_banyumas
  kab_banyuwangi
  kab_barito_kuala
  kab_barito_selatan
  kab_barito_timur
  kab_barito_utara
  kab_barru
  kab_batang
  kab_batanghari
  kab_batu_bara
  kab_bekasi
  kab_belitung
  kab_belitung_timur
  kab_belu
  kab_bener_meriah
  kab_bengkalis
  kab_bengkayang
  kab_bengkulu_selatan
  kab_bengkulu_tengah
  kab_bengkulu_utara
  kab_berau
  kab_biak_numfor
  kab_bima
  kab_bintan
  kab_blitar
  kab_blora
  kab_bogor
  kab_bojonegoro
  kab_bolaang_mongondow
  kab_bolaang_mongondow_selatan
  kab_bolaang_mongondow_timur
  kab_bolaang_mongondow_utara
  kab_bombana
  kab_bondowoso
  kab_bone
  kab_bonebolango
  kab_boven_digoel
  kab_boyolali
  kab_brebes
  kab_bualemo
  kab_buleleng
  kab_bulukumba
  kab_bulungan
  kab_bungo
  kab_buol
  kab_buru
  kab_buru_selatan
  kab_buton
  kab_buton_selatan
  kab_buton_tengah
  kab_buton_utara
  kab_ciamis
  kab_cianjur
  kab_cilacap
  kab_cirebon
  kab_dairi
  kab_deiyai
  kab_deli_serdang
  kab_demak
  kab_dharmasraya
  kab_dogiyai
  kab_dompu
  kab_donggala
  kab_empat_lawang
  kab_ende
  kab_enrekang
  kab_fak_fak
  kab_flores_timur
  kab_garut
  kab_gayo_luwes
  kab_gianyar
  kab_gorontalo
  kab_gorontalo_utara
  kab_gowa
  kab_gresik
  kab_grobogan
  kab_gunung_kidul
  kab_gunung_mas
  kab_halmahera_barat
  kab_halmahera_selatan
  kab_halmahera_tengah
  kab_halmahera_timur
  kab_halmahera_utara
  kab_hulu_sungai_selatan
  kab_hulu_sungai_tengah
  kab_hulu_sungai_utara
  kab_humbang_hasundutan
  kab_indragiri_hilir
  kab_indragiri_hulu
  kab_indramayu
  kab_intan_jaya
  kab_jayapura
  kab_jayawijaya
  kab_jember
  kab_jembrana
  kab_jeneponto
  kab_jepara
  kab_jombang
  kab_kaimana
  kab_kaloka_timur
  kab_kampar
  kab_kapuas
  kab_kapuas_hulu
  kab_karanganyar
  kab_karangasem
  kab_karawang
  kab_karimun
  kab_karo
  kab_katingan
  kab_kaur
  kab_kayong_utara
  kab_kebumen
  kab_kediri
  kab_keerom
  kab_kendal
  kab_kepahiang
  kab_kepulauan_mentawai
  kab_kepulauan_meranti
  kab_kepulauan_sangihe
  kab_kepulauan_sitaro
  kab_kepulauan_sula
  kab_kepulauan_talaud
  kab_kerinci
  kab_ketapang
  kab_klaten
  kab_klungkung
  kab_kolaka
  kab_kolaka_utara
  kab_konawe
  kab_konawe_kepulauan
  kab_konawe_selatan
  kab_konawe_utara
  kab_kota_baru
  kab_kotawaringin_barat
  kab_kotawaringin_timur
  kab_kuantan_singingi
  kab_kubu_raya
  kab_kudus
  kab_kulon_progo
  kab_kuningan
  kab_kupang
  kab_kutai_barat
  kab_kutai_kartanegara
  kab_kutai_timur
  kab_labuhan_batu
  kab_labuhanbatu_selatan
  kab_labuhanbatu_utara
  kab_lahat
  kab_lamandau
  kab_lamongan
  kab_lampung_barat
  kab_lampung_selatan
  kab_lampung_tengah
  kab_lampung_timur
  kab_lampung_utara
  kab_landak
  kab_langkat
  kab_lanny_jaya
  kab_lebak
  kab_lebong
  kab_lematang_ilir_ogan_tengah_muara_enim
  kab_lembata
  kab_limapuluh_koto
  kab_lingga
  kab_lombok_barat
  kab_lombok_tengah
  kab_lombok_timur
  kab_lombok_utara
  kab_lumajang
  kab_luwu
  kab_luwu_timur_d_h_luwu_selatan
  kab_luwu_utara
  kab_madiun
  kab_magelang
  kab_magetan
  kab_mahakam_ulu
  kab_majalengka
  kab_majene
  kab_malaka
  kab_malang
  kab_malinau
  kab_maluku_barat_daya
  kab_maluku_tengah
  kab_maluku_tenggara
  kab_maluku_tenggara_barat
  kab_mamasa
  kab_mamberamo_raya
  kab_mamberamo_tengah
  kab_mamuju_lbu_2016
  kab_mamuju_tengah
  kab_mamuju_utara
  kab_mandailing_natal
  kab_manggarai
  kab_manggarai_barat
  kab_manggarai_timur
  kab_manokwari
  kab_manokwari_selatan
  kab_mappi
  kab_maros
  kab_maybrat
  kab_melawi
  kab_merangin
  kab_merauke
  kab_mesuji
  kab_mimika
  kab_minahasa
  kab_minahasa_selatan
  kab_minahasa_tenggara
  kab_minahasa_utara
  kab_mojokerto
  kab_morowali
  kab_morowali_utara
  kab_muaro_jambi
  kab_mukomuko
  kab_muna
  kab_muna_barat
  kab_murung_raya
  kab_musi_banyuasin
  kab_musi_rawas
  kab_musi_rawas_utara
  kab_nabire
  kab_nagan_raya
  kab_nagekeo
  kab_natuna
  kab_nduga_tengah
  kab_ngada
  kab_nganjuk
  kab_ngawi
  kab_nias
  kab_nias_barat
  kab_nias_selatan
  kab_nias_utara
  kab_nunukan
  kab_ogan_ilir
  kab_ogan_komeing_ulu_selatan
  kab_ogan_komeing_ulu_timur
  kab_ogan_komering_ilir
  kab_ogan_komering_ulu
  kab_pacitan
  kab_padang_lawas
  kab_padang_lawas_utara
  kab_padang_pariaman
  kab_pakpak_bharat
  kab_pamekasan
  kab_pandeglang
  kab_pangandaran
  kab_pangkajene_kepulauan
  kab_paniai
  kab_parigi_moutong
  kab_parimo_banggai
  kab_pasaman
  kab_pasaman_barat
  kab_pasir
  kab_pasuruan
  kab_pati
  kab_pegunungan_arfak
  kab_pegunungan_bintang
  kab_pekalongan
  kab_pelalawan
  kab_pemalang
  kab_penajam_paser_utara
  kab_penukal_abab_lematang_ilir
  kab_pesawaran
  kab_pesisir_barat
  kab_pesisir_selatan
  kab_pidie
  kab_pidie_jaya
  kab_pinrang
  kab_pohuwato
  kab_polewali_mandar
  kab_ponorogo
  kab_pontianak
  kab_poso
  kab_pringsewu
  kab_probolinggo
  kab_pulang_pisau
  kab_pulau_morotai
  kab_pulau_taliabu
  kab_puncak
  kab_puncak_jaya
  kab_purbalingga
  kab_purwakarta
  kab_purworejo
  kab_raja_ampat
  kab_rejang_lebong
  kab_rembang
  kab_rokan_hilir
  kab_rokan_hulu
  kab_rote
  kab_sabu_raijua
  kab_sambas
  kab_samosir
  kab_sampang
  kab_sanggau
  kab_sarmi
  kab_sarolangun
  kab_sawahlunto_sijunjung
  kab_sekadau
  kab_selayar
  kab_seluma
  kab_semarang
  kab_serang
  kab_serdang_bedagai
  kab_seruyan
  kab_siak
  kab_sidenreng_rappang
  kab_sidoarjo
  kab_sigi
  kab_sikka
  kab_simalungun
  kab_sinjai
  kab_sintang
  kab_situbondo
  kab_sleman
  kab_solok
  kab_solok_selatan
  kab_soppeng_d_h_watansoppeng
  kab_sorong
  kab_sorong_selatan
  kab_sragen
  kab_subang
  kab_subulussalam
  kab_sukabumi
  kab_sukamara
  kab_sukoharjo
  kab_sumba_barat
  kab_sumba_barat_daya
  kab_sumba_tengah
  kab_sumba_timur
  kab_sumbawa
  kab_sumbawa_barat
  kab_sumedang
  kab_sumenep
  kab_supiori
  kab_tabalong
  kab_tabanan
  kab_takalar
  kab_tana_tidung
  kab_tana_toraja
  kab_tanah_datar
  kab_tanah_laut
  kab_tangerang
  kab_tanggamus
  kab_tanjung_jabung_barat
  kab_tanjung_jabung_timur
  kab_tapanuli_selatan
  kab_tapanuli_tengah
  kab_tapanuli_utara
  kab_tapin
  kab_tasikmalaya
  kab_tebo
  kab_tegal
  kab_teluk_bintuni
  kab_teluk_wondama
  kab_temanggung
  kab_tembrauw
  kab_timor_tengah_selatan
  kab_timor_tengah_utara
  kab_toba_samosir
  kab_tojo_una_una
  kab_toli_toli
  kab_tolikara
  kab_toraja_utara
  kab_trenggalek
  kab_tuban
  kab_tulang_bawang
  kab_tulang_bawang_barat
  kab_tulungagung
  kab_wajo
  kab_wakatobi
  kab_waropen
  kab_way_kanan
  kab_wonogiri
  kab_wonosobo
  kab_yahukimo
  kab_yalimo
  kab_yapen_waropen
  kabbanggai_kepulauan
  kabtanah_bumbu
  kabupaten_kepulauan_aru
  kabupaten_seram_bagian_barat
  kabupaten_seram_bagian_timur
  kota__metro
  kota_ambon
  kota_balikpapan
  kota_banda_aceh
  kota_bandar_lampung
  kota_bandung
  kota_banjar
  kota_banjarbaru
  kota_banjarmasin
  kota_batam
  kota_batu
  kota_bau_bau
  kota_bekasi
  kota_bengkulu
  kota_bima
  kota_binjai
  kota_bitung
  kota_blitar
  kota_bogor
  kota_bontang
  kota_bukittinggi
  kota_cilegon
  kota_cimahi
  kota_cirebon
  kota_denpasar
  kota_depok
  kota_dumai
  kota_gorontalo
  kota_gunung_sitoli
  kota_jambi
  kota_jayapura
  kota_kediri
  kota_kendari
  kota_kotamobagu
  kota_kupang
  kota_langsa
  kota_lhokseumawe
  kota_lubuklinggau
  kota_madiun
  kota_magelang
  kota_makassar
  kota_malang
  kota_mamuju
  kota_mataram
  kota_medan
  kota_menado
  kota_mojokerto
  kota_padang
  kota_padang_panjang
  kota_padang_sidempuan
  kota_pagar_alam
  kota_palangkaraya
  kota_palembang
  kota_palopo
  kota_palu
  kota_pangkal_pinang
  kota_pare_pare
  kota_pariaman
  kota_pasuruan
  kota_payakumbuh
  kota_pekalongan
  kota_pekanbaru
  kota_pematang_siantar
  kota_pontianak
  kota_prabumulih
  kota_probolinggo
  kota_sabang
  kota_salatiga
  kota_samarinda
  kota_sawahlunto
  kota_semarang
  kota_serang
  kota_sibolga
  kota_singkawang
  kota_solok
  kota_sorong
  kota_sukabumi
  kota_sungai_penuh
  kota_surabaya
  kota_surakarta_solo
  kota_tangerang
  kota_tangerang_selatan
  kota_tanjung_balai
  kota_tanjung_pinang
  kota_tarakan
  kota_tasikmalaya
  kota_tebing_tinggi
  kota_tegal
  kota_ternate
  kota_tidore_kepulauan
  kota_tomohon
  kota_tual
  kota_yogyakarta
  prov_jawa_tengah
  prov_jawa_timur
  wil_kepulauan_seribu
  wil_kota_jakarta_barat
  wil_kota_jakarta_pusat
  wil_kota_jakarta_selatan
  wil_kota_jakarta_timur
  wil_kota_jakarta_utara
}

enum DebtorCode {
  bank_bangkok_bank_ltd
  bank_mandiri_shanghai
  non_residents_central_government
  non_residents_foreign_state_owned_enterprises_bumn
  non_residents_individuals
  non_residents_inter_bank_institutions_multi_asian_development_bank_adb
  non_residents_inter_bank_institutions_multi_islamic_development_bank_idb
  non_residents_inter_bank_institutions_multi_others
  non_residents_inter_bank_institutions_multi_world_bank
  non_residents_international_institutions_others
  non_residents_non_bank_financial_institutions_operating_outside_indonesia
  non_residents_other_private_sectors_indonesian_owned_private_sectors
  non_residents_other_private_sectors_joint_venture_between_indonesia_and_foreign_countries
  non_residents_other_private_sectors_others
  non_residents_representatives_of_foreign_countries_and_their_staff
  residents_government_sector_central_government_mining_and_energy
  residents_government_sector_central_government_ministry_of_defense
  residents_government_sector_central_government_ministry_of_finance
  residents_government_sector_central_government_ministry_of_religious_affairs
  residents_government_sector_central_government_ministry_of_state_owned_enterprises_bumn
  residents_government_sector_central_government_other_departments
  residents_government_sector_central_government_state_treasury_and_cash_office_kpkn
  residents_government_sector_government_agencies_and_institutions_deposit_insurance_corporation
  residents_government_sector_government_agencies_and_institutions_logistics_affairs_agency
  residents_government_sector_government_agencies_and_institutions_others
  residents_government_sector_regional_government_owned_enterprises_bumd_non_bank_financial_institutions_financing_companies
  residents_government_sector_regional_government_owned_enterprises_bumd_non_bank_financial_institutions_others
  residents_government_sector_regional_government_owned_enterprises_bumd_non_bank_financial_institutions_pension_fund
  residents_government_sector_regional_government_owned_enterprises_bumd_non_bank_financial_institutions_pension_fund_insurance_companies
  residents_government_sector_regional_government_owned_enterprises_bumd_non_bank_financial_institutions_securities_companies_investment_managers
  residents_government_sector_regional_government_owned_enterprises_bumd_non_bank_financial_institutions_securities_companies_mutual_fund_companies
  residents_government_sector_regional_government_owned_enterprises_bumd_non_bank_financial_institutions_securities_companies_others
  residents_government_sector_regional_government_owned_enterprises_bumd_non_bank_financial_institutions_securities_companies_securities_companies_conducting_mutual_fund_business_activities
  residents_government_sector_regional_government_owned_enterprises_bumd_non_bank_financial_institutions_securities_companies_securities_companies_not_conducting_mutual_fund_business_activities
  residents_government_sector_regional_government_owned_enterprises_bumd_non_bank_financial_institutions_venture_capital
  residents_government_sector_regional_government_owned_enterprises_bumd_non_financial_institutions_others
  residents_government_sector_regional_government_owned_enterprises_bumd_non_financial_institutions_regional_market_companies
  residents_government_sector_regional_government_owned_enterprises_bumd_non_financial_institutions_regional_water_companies
  residents_government_sector_regional_government_pemda_city_government
  residents_government_sector_regional_government_pemda_province
  residents_government_sector_regional_government_pemda_regency_government
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_construction_services_companies
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_financing_companies
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_indonesian_export_financing_agency
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_others
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_others_others
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_others_pt_pos_indonesia
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_others_state_pawnshop_perum_pegadaian
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_pension_fund
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_pension_fund_armed_forces_social_insurance_asabri
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_pension_fund_civil_servants_savings_and_insurance_taspen
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_pension_fund_jasa_raharja_insurance
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_pension_fund_jasindo_insurance
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_pension_fund_jiwasraya_insurance
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_pension_fund_other_insurance_companies
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_pension_fund_social_security_jamsostek
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_pt_aneka_tambang
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_pt_angkasa_pura
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_pt_angkutan_sungai_danaupenyeberangan
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_pt_garuda_indonesia
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_pt_indosat
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_pt_jasa_marga
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_pt_kereta_api_indonesia_kai
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_pt_krakatau_steel
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_pt_pelabuhan_laut_indonesia_pelindo
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_pt_pelayaran_nasional_indonesia_pelni
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_pt_perkebunan_nusantara
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_pt_pertamina
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_pt_perusahaan_listrik_negara_pln
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_pt_telkom
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_pt_timah
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_securities_companies_investment_managers
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_securities_companies_mutual_fund_companies
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_securities_companies_others
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_securities_companies_pt_danareksa
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_securities_companies_securities_companies_conducting_mutual_fund_business_activities
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_securities_companies_securities_companies_not_conducting_mutual_fund_business_activities
  residents_government_sector_state_owned_enterprises_mixed_government_non_bank_financial_institutions_venture_capital
  residents_private_sector_non_bank_financial_institutions_foreign_private_financing_companies
  residents_private_sector_non_bank_financial_institutions_foreign_private_other_non_bank_financial_institutions_baitul_maal_wa_tamwil_bmt
  residents_private_sector_non_bank_financial_institutions_foreign_private_other_non_bank_financial_institutions_other_foreign_owned_institutions_in_indonesia
  residents_private_sector_non_bank_financial_institutions_foreign_private_other_non_bank_financial_institutions_others
  residents_private_sector_non_bank_financial_institutions_foreign_private_pension_fund
  residents_private_sector_non_bank_financial_institutions_foreign_private_pension_fund_insurance_companies
  residents_private_sector_non_bank_financial_institutions_foreign_private_securities_companies_investment_managers
  residents_private_sector_non_bank_financial_institutions_foreign_private_securities_companies_mutual_fund_companies
  residents_private_sector_non_bank_financial_institutions_foreign_private_securities_companies_others
  residents_private_sector_non_bank_financial_institutions_foreign_private_securities_companies_securities_companies_conducting_mutual_fund_business_activities
  residents_private_sector_non_bank_financial_institutions_foreign_private_securities_companies_securities_companies_not_conducting_mutual_fund_business_activities
  residents_private_sector_non_bank_financial_institutions_foreign_private_venture_capital
  residents_private_sector_non_bank_financial_institutions_mixed_private_financing_companies
  residents_private_sector_non_bank_financial_institutions_mixed_private_other_non_bank_financial_institutions_baitul_maal_wa_tamwil_bmt
  residents_private_sector_non_bank_financial_institutions_mixed_private_other_non_bank_financial_institutions_other_foreign_owned_institutions_in_indonesia
  residents_private_sector_non_bank_financial_institutions_mixed_private_other_non_bank_financial_institutions_others
  residents_private_sector_non_bank_financial_institutions_mixed_private_pension_fund
  residents_private_sector_non_bank_financial_institutions_mixed_private_pension_fund_insurance_companies
  residents_private_sector_non_bank_financial_institutions_mixed_private_securities_companies_investment_managers
  residents_private_sector_non_bank_financial_institutions_mixed_private_securities_companies_mutual_fund_companies
  residents_private_sector_non_bank_financial_institutions_mixed_private_securities_companies_others
  residents_private_sector_non_bank_financial_institutions_mixed_private_securities_companies_securities_companies_conducting_mutual_fund_business_activities
  residents_private_sector_non_bank_financial_institutions_mixed_private_securities_companies_securities_companies_not_conducting_mutual_fund_business_activities
  residents_private_sector_non_bank_financial_institutions_mixed_private_venture_capital
  residents_private_sector_non_bank_financial_institutions_national_private_financing_companies
  residents_private_sector_non_bank_financial_institutions_national_private_other_non_bank_financial_institutions_baitul_maal_wa_tamwil_bmt
  residents_private_sector_non_bank_financial_institutions_national_private_other_non_bank_financial_institutions_other_cooperatives
  residents_private_sector_non_bank_financial_institutions_national_private_other_non_bank_financial_institutions_others
  residents_private_sector_non_bank_financial_institutions_national_private_other_non_bank_financial_institutions_primary_cooperatives
  residents_private_sector_non_bank_financial_institutions_national_private_pension_fund
  residents_private_sector_non_bank_financial_institutions_national_private_pension_fund_insurance_companies
  residents_private_sector_non_bank_financial_institutions_national_private_securities_companies_investment_managers
  residents_private_sector_non_bank_financial_institutions_national_private_securities_companies_mutual_fund_companies
  residents_private_sector_non_bank_financial_institutions_national_private_securities_companies_others
  residents_private_sector_non_bank_financial_institutions_national_private_securities_companies_securities_companies_conducting_mutual_fund_business_activities
  residents_private_sector_non_bank_financial_institutions_national_private_securities_companies_securities_companies_not_conducting_mutual_fund_business_activities
  residents_private_sector_non_bank_financial_institutions_national_private_venture_capital
  residents_private_sector_non_financial_institutions_foreign_private_other_companies_agribusiness_companies
  residents_private_sector_non_financial_institutions_foreign_private_other_companies_automotive_companies
  residents_private_sector_non_financial_institutions_foreign_private_other_companies_cigarette_industry_companies
  residents_private_sector_non_financial_institutions_foreign_private_other_companies_construction_services_companies
  residents_private_sector_non_financial_institutions_foreign_private_other_companies_food_industry_companies
  residents_private_sector_non_financial_institutions_foreign_private_other_companies_logging_companies_hph
  residents_private_sector_non_financial_institutions_foreign_private_other_companies_oil_companies
  residents_private_sector_non_financial_institutions_foreign_private_other_companies_other_companies
  residents_private_sector_non_financial_institutions_foreign_private_other_companies_textile_companies
  residents_private_sector_non_financial_institutions_foreign_private_religious_social_and_educational_organizations_educational_institutions
  residents_private_sector_non_financial_institutions_foreign_private_religious_social_and_educational_organizations_others
  residents_private_sector_non_financial_institutions_foreign_private_religious_social_and_educational_organizations_zakat_infaq_and_shadaqah_collection_agency
  residents_private_sector_non_financial_institutions_foreign_private_representative_offices_of_foreign_owned_institutions_in_indonesia
  residents_private_sector_non_financial_institutions_individuals
  residents_private_sector_non_financial_institutions_mixed_private_other_companies_agribusiness_companies
  residents_private_sector_non_financial_institutions_mixed_private_other_companies_automotive_companies
  residents_private_sector_non_financial_institutions_mixed_private_other_companies_cigarette_industry_companies
  residents_private_sector_non_financial_institutions_mixed_private_other_companies_construction_services_companies
  residents_private_sector_non_financial_institutions_mixed_private_other_companies_food_industry_companies
  residents_private_sector_non_financial_institutions_mixed_private_other_companies_logging_companies_hph
  residents_private_sector_non_financial_institutions_mixed_private_other_companies_oil_companies
  residents_private_sector_non_financial_institutions_mixed_private_other_companies_other_companies
  residents_private_sector_non_financial_institutions_mixed_private_other_companies_textile_companies
  residents_private_sector_non_financial_institutions_mixed_private_religious_social_and_educational_organizations_educational_institutions
  residents_private_sector_non_financial_institutions_mixed_private_religious_social_and_educational_organizations_others
  residents_private_sector_non_financial_institutions_mixed_private_religious_social_and_educational_organizations_zakat_infaq_and_shadaqah_collection_agency
  residents_private_sector_non_financial_institutions_mixed_private_representative_offices_of_foreign_owned_institutions_in_indonesia
  residents_private_sector_non_financial_institutions_national_private_non_savings_and_loans_cooperatives_other_cooperatives
  residents_private_sector_non_financial_institutions_national_private_non_savings_and_loans_cooperatives_primary_cooperatives
  residents_private_sector_non_financial_institutions_national_private_other_companies_agribusiness_companies
  residents_private_sector_non_financial_institutions_national_private_other_companies_automotive_companies
  residents_private_sector_non_financial_institutions_national_private_other_companies_cigarette_industry_companies
  residents_private_sector_non_financial_institutions_national_private_other_companies_construction_services_companies
  residents_private_sector_non_financial_institutions_national_private_other_companies_food_industry_companies
  residents_private_sector_non_financial_institutions_national_private_other_companies_logging_companies_hph
  residents_private_sector_non_financial_institutions_national_private_other_companies_oil_companies
  residents_private_sector_non_financial_institutions_national_private_other_companies_other_companies
  residents_private_sector_non_financial_institutions_national_private_other_companies_textile_companies
  residents_private_sector_non_financial_institutions_national_private_religious_social_and_educational_organizations_educational_institutions
  residents_private_sector_non_financial_institutions_national_private_religious_social_and_educational_organizations_others
  residents_private_sector_non_financial_institutions_national_private_religious_social_and_educational_organizations_zakat_infaq_and_shadaqah_collection_agency
  residents_private_sector_other_private_sectors
  standard_chartered_bank
}

enum Department {
  "business_development"
  business_development
  "customer_service"
  customer_service
  "finance_asset_management"
  finance_asset_management
  "information_technology"
  information_technology
  "international_relationship"
  international_relationship
  "legal_claims"
  legal_claims
  "operations_human_resources"
  operations_human_resources
  "other"
  other
  "risk_compliance"
  risk_compliance
  "sales_collaboration"
  sales_collaboration
}

enum DeviceChannel {
  "email"
  email
  "phone"
  phone
  "viber"
  viber
}

enum DocumentTemplateClassifications {
  "MERCHANT_CONTRACT"
  merchant_contract
  "USER_CONTRACT"
  user_contract
}

enum DocumentTemplateStatuses {
  "ACTIVE"
  active
  "INACTIVE"
  inactive
}

enum DurationUnit {
  "days"
  days
  "months"
  months
  "weeks"
  weeks
  "years"
  years
}

enum EconomicSector {
  accommodation_and_food_and_beverage_service_activities_accommodation_and_food_and_beverage_service_activities_accommodation_provision_non_star_hotels
  accommodation_and_food_and_beverage_service_activities_accommodation_and_food_and_beverage_service_activities_accommodation_provision_other_accommodation_services
  accommodation_and_food_and_beverage_service_activities_accommodation_and_food_and_beverage_service_activities_accommodation_provision_star_hotels
  accommodation_and_food_and_beverage_service_activities_accommodation_and_food_and_beverage_service_activities_restaurants_food_stalls_bars_and_catering_services_other_food_and_beverage_provision
  accommodation_and_food_and_beverage_service_activities_accommodation_and_food_and_beverage_service_activities_restaurants_food_stalls_bars_and_catering_services_restaurants_food_stalls
  activities_with_unclear_boundaries_activities_with_unclear_boundaries_activities_with_unclear_boundaries_business_entities
  activities_with_unclear_boundaries_activities_with_unclear_boundaries_activities_with_unclear_boundaries_individuals
  agriculture_hunting_and_forestry_agriculture_and_hunting_agriculture_or_plantation_combination_with_livestock_mixed_farming
  agriculture_hunting_and_forestry_agriculture_and_hunting_agriculture_plantation_and_livestock_services
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_food_crops_and_estate_crops_agriculture_essential_oil_crops_plantation
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_food_crops_and_estate_crops_agriculture_medicinal_pharmaceutical_crops_plantation
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_food_crops_and_estate_crops_agriculture_other_crops_plantation_not_elsewhere_classified
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_food_crops_and_estate_crops_agriculture_palawija_farming_cassava_palawija_farming
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_food_crops_and_estate_crops_agriculture_palawija_farming_corn_palawija_farming
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_food_crops_and_estate_crops_agriculture_palawija_farming_other_legumes_palawija_farming
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_food_crops_and_estate_crops_agriculture_palawija_farming_other_tubers_palawija_farming
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_food_crops_and_estate_crops_agriculture_palawija_farming_peanut_palawija_farming
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_food_crops_and_estate_crops_agriculture_palawija_farming_soybean_palawija_farming
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_food_crops_and_estate_crops_agriculture_palawija_farming_sweet_potato_palawija_farming
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_food_crops_and_estate_crops_agriculture_rice_farming
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_food_crops_and_estate_crops_agriculture_rubber_and_other_sap_producers_plantation
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_food_crops_and_estate_crops_agriculture_sugarcane_and_other_sweetener_crops_plantation
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_food_crops_and_estate_crops_agriculture_textile_raw_materials_and_similar_crops_plantation
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_food_crops_and_estate_crops_agriculture_tobacco_plantation
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_fruits_coconut_plantations_oil_palm_plantations_beverage_crops_plantations_cashew_nut_plantations_and_spice_crops_plantations_beverage_crops_plantations_cocoa_plantation
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_fruits_coconut_plantations_oil_palm_plantations_beverage_crops_plantations_cashew_nut_plantations_and_spice_crops_plantations_beverage_crops_plantations_coffee_plantation
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_fruits_coconut_plantations_oil_palm_plantations_beverage_crops_plantations_cashew_nut_plantations_and_spice_crops_plantations_beverage_crops_plantations_tea_plantation
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_fruits_coconut_plantations_oil_palm_plantations_beverage_crops_plantations_cashew_nut_plantations_and_spice_crops_plantations_cashew_nut_plantation
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_fruits_coconut_plantations_oil_palm_plantations_beverage_crops_plantations_cashew_nut_plantations_and_spice_crops_plantations_clove_plantation
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_fruits_coconut_plantations_oil_palm_plantations_beverage_crops_plantations_cashew_nut_plantations_and_spice_crops_plantations_coconut_plantation
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_fruits_coconut_plantations_oil_palm_plantations_beverage_crops_plantations_cashew_nut_plantations_and_spice_crops_plantations_oil_palm_plantation
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_fruits_coconut_plantations_oil_palm_plantations_beverage_crops_plantations_cashew_nut_plantations_and_spice_crops_plantations_other_spice_crops_plantations_nutmeg_spice_crops_plantation
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_fruits_coconut_plantations_oil_palm_plantations_beverage_crops_plantations_cashew_nut_plantations_and_spice_crops_plantations_other_spice_crops_plantations_other_spice_crops_plantation_not_elsewhere_classified
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_fruits_coconut_plantations_oil_palm_plantations_beverage_crops_plantations_cashew_nut_plantations_and_spice_crops_plantations_other_spice_crops_plantations_vanilla_spice_crops_plantation
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_fruits_coconut_plantations_oil_palm_plantations_beverage_crops_plantations_cashew_nut_plantations_and_spice_crops_plantations_pepper_plantation
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_fruits_coconut_plantations_oil_palm_plantations_beverage_crops_plantations_cashew_nut_plantations_and_spice_crops_plantations_seasonal_fruits_farming_other_seasonal_fruits_farming
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_fruits_coconut_plantations_oil_palm_plantations_beverage_crops_plantations_cashew_nut_plantations_and_spice_crops_plantations_seasonal_fruits_farming_seasonal_fruits_farming_citrus
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_fruits_coconut_plantations_oil_palm_plantations_beverage_crops_plantations_cashew_nut_plantations_and_spice_crops_plantations_year_round_fruits_farming_other_year_round_fruits_farming
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_fruits_coconut_plantations_oil_palm_plantations_beverage_crops_plantations_cashew_nut_plantations_and_spice_crops_plantations_year_round_fruits_farming_year_round_fruits_farming_bananas
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_horticulture_vegetables_and_flowers
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_horticulture_vegetables_and_flowers_farming_horticulture_flowers_horticulture_flowers_orchid
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_horticulture_vegetables_and_flowers_farming_horticulture_flowers_other_horticulture_flowers
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_horticulture_vegetables_and_flowers_farming_horticulture_vegetables_harvested_more_than_once
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_horticulture_vegetables_and_flowers_farming_horticulture_vegetables_harvested_once_horticulture_vegetables_harvested_once_shallots
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_horticulture_vegetables_and_flowers_farming_nursery_and_seedlings_for_horticulture_vegetables_and_flowers
  agriculture_hunting_and_forestry_agriculture_and_hunting_food_crops_estate_crops_and_horticulture_agriculture_other_ornamental_plants_farming
  agriculture_hunting_and_forestry_agriculture_and_hunting_hunting_capture_and_captivity_of_wildlife
  agriculture_hunting_and_forestry_agriculture_and_hunting_livestock_livestock_breeding_and_cultivation_beef_cattle_breeding_and_cultivation
  agriculture_hunting_and_forestry_agriculture_and_hunting_livestock_livestock_breeding_and_cultivation_dairy_cattle_breeding_and_cultivation
  agriculture_hunting_and_forestry_agriculture_and_hunting_livestock_livestock_breeding_and_cultivation_sheep_and_goat_breeding_and_cultivation
  agriculture_hunting_and_forestry_agriculture_and_hunting_livestock_other_livestock_breeding_and_cultivation_pig_breeding_and_cultivation
  agriculture_hunting_and_forestry_agriculture_and_hunting_livestock_other_livestock_breeding_and_cultivation_poultry_breeding_and_cultivation
  agriculture_hunting_and_forestry_forestry_forestry_forestry_services
  agriculture_hunting_and_forestry_forestry_forestry_natural_forest_management
  agriculture_hunting_and_forestry_forestry_forestry_non_timber_forest_products_management
  agriculture_hunting_and_forestry_forestry_forestry_other_forestry_activities
  agriculture_hunting_and_forestry_forestry_forestry_plantation_forest_management
  community_social_and_personal_services_activities_of_organizations_not_elsewhere_classified_business_employers_and_professional_organizations
  community_social_and_personal_services_activities_of_organizations_not_elsewhere_classified_labor_organizations
  community_social_and_personal_services_activities_of_organizations_not_elsewhere_classified_other_organizations
  community_social_and_personal_services_other_activities_other_activities
  community_social_and_personal_services_recreational_cultural_and_sporting_activities_libraries_archives_museums_and_other_cultural_activities
  community_social_and_personal_services_recreational_cultural_and_sporting_activities_motion_picture_radio_television_and_other_entertainment_activities
  community_social_and_personal_services_recreational_cultural_and_sporting_activities_news_agency_activities
  community_social_and_personal_services_sanitation_services_sanitation_services
  construction_construction_building_and_civil_construction
  construction_construction_building_and_civil_construction_building_construction_industrial_building_construction
  construction_construction_building_and_civil_construction_building_construction_office_building_construction
  construction_construction_building_and_civil_construction_building_construction_other_building_construction
  construction_construction_building_and_civil_construction_building_construction_residential_building_construction_medium_large_luxury_housing_type_above_70
  construction_construction_building_and_civil_construction_building_construction_residential_building_construction_simple_housing_construction_others_type_22_to_70
  construction_construction_building_and_civil_construction_building_construction_residential_building_construction_simple_housing_construction_others_type_up_to_21
  construction_construction_building_and_civil_construction_building_construction_residential_building_construction_simple_housing_construction_perumnas
  construction_construction_building_and_civil_construction_building_construction_residential_building_construction_simple_housing_construction_state_savings_bank
  construction_construction_building_and_civil_construction_building_construction_shopping_building_construction_inpres_market_shopping_building_construction
  construction_construction_building_and_civil_construction_building_construction_shopping_building_construction_other_shopping_building_construction
  construction_construction_building_and_civil_construction_civil_construction_irrigation_construction
  construction_construction_building_and_civil_construction_civil_construction_other_civil_construction
  construction_construction_building_and_civil_construction_civil_construction_railway_road_and_bridge_construction
  construction_construction_building_and_civil_construction_civil_construction_road_bridge_and_runway_construction_highway_construction
  construction_construction_building_and_civil_construction_civil_construction_road_bridge_and_runway_construction_road_bridge_and_runway_construction
  construction_construction_building_and_civil_construction_civil_construction_road_bridge_and_runway_construction_toll_road_construction
  construction_construction_building_and_civil_construction_electrical_and_communication_construction_other_electrical_and_communication_construction
  construction_construction_building_and_civil_construction_electrical_and_communication_construction_rural_electrical_construction
  construction_construction_building_and_civil_construction_special_construction
  construction_construction_building_and_civil_installation_building_installation
  construction_construction_building_and_civil_installation_civil_installation
  construction_construction_building_construction_completion
  construction_construction_building_demolition_with_operator
  construction_construction_land_preparation_other_land_preparation
  construction_construction_land_preparation_paddy_field_land_preparation
  construction_construction_land_preparation_transmigration_settlement_land_preparation_ptpt
  education_services_education_services_higher_education_services
  education_services_education_services_other_education_services
  education_services_education_services_primary_education_services
  education_services_education_services_secondary_education_services
  electricity_gas_and_water_clean_water_supply_and_distribution_clean_water_supply_and_distribution
  electricity_gas_and_water_electricity_gas_and_hot_water_electricity_other_electricity
  electricity_gas_and_water_electricity_gas_and_hot_water_electricity_rural_electricity
  electricity_gas_and_water_electricity_gas_and_hot_water_gas
  electricity_gas_and_water_electricity_gas_and_hot_water_steam_and_hot_water
  financial_intermediation_financial_intermediation_except_insurance_and_pension_funding_activities_auxiliary_to_financial_intermediation_currency_exchange_services_or_foreign_exchange_dealers_money_changers
  financial_intermediation_financial_intermediation_except_insurance_and_pension_funding_activities_auxiliary_to_financial_intermediation_other_activities_auxiliary_to_financial_intermediation
  financial_intermediation_financial_intermediation_except_insurance_and_pension_funding_activities_auxiliary_to_insurance_and_pension_funding
  financial_intermediation_financial_intermediation_except_insurance_and_pension_funding_insurance_and_pension_funds
  financial_intermediation_financial_intermediation_except_insurance_and_pension_funding_monetary_intermediation_banks
  financial_intermediation_financial_intermediation_except_insurance_and_pension_funding_other_financial_intermediation_non_bank_other_financial_intermediation_non_bank_leasing
  financial_intermediation_financial_intermediation_except_insurance_and_pension_funding_other_financial_intermediation_non_bank_other_financial_intermediation_non_bank_other_than_leasing
  fisheries_fisheries_capture_of_biota_in_general_waters_capture_of_crustacea_mollusca_and_other_biota_in_general_waters
  fisheries_fisheries_capture_of_biota_in_general_waters_fish_capture_in_general_waters
  fisheries_fisheries_fisheries_capture_of_biota_in_the_sea_sea_crustacea_capture_other_sea_crustacea_capture
  fisheries_fisheries_fisheries_capture_of_biota_in_the_sea_sea_crustacea_capture_sea_shrimp_capture
  fisheries_fisheries_fisheries_capture_of_biota_in_the_sea_sea_fish_capture_other_fish_capture
  fisheries_fisheries_fisheries_capture_of_biota_in_the_sea_sea_fish_capture_tuna_fishing
  fisheries_fisheries_fisheries_others
  fisheries_fisheries_fishery_services_inland_fishery_production_facility_services
  fisheries_fisheries_fishery_services_marine_fishery_production_facility_services
  fisheries_fisheries_fishery_services_other_fishery_services
  fisheries_fisheries_freshwater_and_brackish_water_biota_cultivation_brackish_water_biota_cultivation_brackish_water_shrimp_cultivation
  fisheries_fisheries_freshwater_and_brackish_water_biota_cultivation_brackish_water_biota_cultivation_other_brackish_water_biota_cultivation
  fisheries_fisheries_freshwater_and_brackish_water_biota_cultivation_freshwater_and_brackish_water_biota_seeding
  fisheries_fisheries_freshwater_and_brackish_water_biota_cultivation_freshwater_biota_cultivation_freshwater_shrimp_cultivation
  fisheries_fisheries_freshwater_and_brackish_water_biota_cultivation_freshwater_biota_cultivation_other_freshwater_biota_cultivation
  fisheries_fisheries_sea_biota_cultivation_sea_biota_cultivation_other_sea_biota_cultivation
  fisheries_fisheries_sea_biota_cultivation_sea_biota_cultivation_sea_seaweed_cultivation
  fisheries_fisheries_sea_biota_cultivation_sea_biota_cultivation_sea_shrimp_cultivation
  fisheries_fisheries_sea_biota_cultivation_sea_biota_cultivation_sea_tuna_cultivation
  fisheries_fisheries_sea_biota_cultivation_sea_biota_seeding
  health_and_social_work_health_and_social_work_human_health_services_hospitals_and_other_medical_practices_human_health_services_hospitals
  health_and_social_work_health_and_social_work_human_health_services_hospitals_and_other_medical_practices_human_health_services_medical_profession
  health_and_social_work_health_and_social_work_human_health_services_hospitals_and_other_medical_practices_human_health_services_polyclinics_maternity_homes
  health_and_social_work_health_and_social_work_human_health_services_hospitals_and_other_medical_practices_human_health_services_treatment_therapy_centers
  health_and_social_work_health_and_social_work_social_work_services
  health_and_social_work_health_and_social_work_veterinary_services
  household_household_for_flat_or_apartment_ownership_household_for_flat_or_apartment_ownership_type_22_to_70
  household_household_for_flat_or_apartment_ownership_household_for_flat_or_apartment_ownership_type_above_70
  household_household_for_flat_or_apartment_ownership_household_for_flat_or_apartment_ownership_up_to_type_21
  household_household_for_housing_ownership_household_for_residential_house_ownership_household_for_residential_house_ownership_type_22_to_70
  household_household_for_housing_ownership_household_for_residential_house_ownership_household_for_residential_house_ownership_type_above_70
  household_household_for_housing_ownership_household_for_residential_house_ownership_household_for_residential_house_ownership_up_to_type_21
  household_household_for_motor_vehicle_ownership_household_for_four_wheeled_car_ownership
  household_household_for_motor_vehicle_ownership_household_for_motorcycle_ownership
  household_household_for_motor_vehicle_ownership_household_for_other_motor_vehicle_ownership
  household_household_for_motor_vehicle_ownership_household_for_truck_and_six_wheeled_or_more_motor_vehicle_ownership
  household_household_for_other_household_equipment_ownership_household_for_computer_and_communication_equipment_ownership
  household_household_for_other_household_equipment_ownership_household_for_furniture_and_household_equipment_ownership
  household_household_for_other_household_equipment_ownership_household_for_other_equipment_ownership
  household_household_for_other_household_equipment_ownership_household_for_television_radio_and_electronic_equipment_ownership
  household_household_for_purposes_not_elsewhere_classified_household_for_multipurpose_purposes_secured_by_apartment_type_22_to_70
  household_household_for_purposes_not_elsewhere_classified_household_for_multipurpose_purposes_secured_by_apartment_type_above_70
  household_household_for_purposes_not_elsewhere_classified_household_for_multipurpose_purposes_secured_by_apartment_up_to_type_21
  household_household_for_purposes_not_elsewhere_classified_household_for_multipurpose_purposes_secured_by_residential_house_type_22_to_70
  household_household_for_purposes_not_elsewhere_classified_household_for_multipurpose_purposes_secured_by_residential_house_type_above_70
  household_household_for_purposes_not_elsewhere_classified_household_for_multipurpose_purposes_secured_by_residential_house_up_to_type_21
  household_household_for_purposes_not_elsewhere_classified_household_for_multipurpose_purposes_secured_by_shop_house_office_house
  household_household_for_purposes_not_elsewhere_classified_household_for_multipurpose_purposes_secured_by_shop_house_office_house_2nd
  household_household_for_purposes_not_elsewhere_classified_household_for_other_multipurpose_purposes
  household_household_for_purposes_not_elsewhere_classified_household_for_purposes_not_elsewhere_classified
  household_household_for_shop_house_ruko_or_office_house_rukan_ownership_household_for_shop_house_ruko_or_office_house_rukan_ownership
  household_not_other_business_fields_not_other_business_fields_not_other_business_fields
  international_bodies_and_other_extra_international_bodies_international_bodies_and_other_extra_international_bodies_international_bodies_and_other_extra_international_bodies
  manufacturing_industry_basic_metal_industry_basic_iron_and_steel_industry
  manufacturing_industry_basic_metal_industry_basic_non_ferrous_metal_industry
  manufacturing_industry_basic_metal_industry_metal_casting_industry_iron_and_steel_casting_industry
  manufacturing_industry_basic_metal_industry_metal_casting_industry_non_ferrous_metal_casting_industry
  manufacturing_industry_chemicals_and_chemical_goods_industry_industrial_chemical_industry_basic_chemical_industry_except_fertilizers
  manufacturing_industry_chemicals_and_chemical_goods_industry_industrial_chemical_industry_fertilizer_industry
  manufacturing_industry_chemicals_and_chemical_goods_industry_industrial_chemical_industry_plastic_and_synthetic_rubber_industry
  manufacturing_industry_chemicals_and_chemical_goods_industry_other_chemical_goods_industry_chemical_materials_and_chemical_goods_industry_not_elsewhere_classified_essential_oil_industry
  manufacturing_industry_chemicals_and_chemical_goods_industry_other_chemical_goods_industry_chemical_materials_and_chemical_goods_industry_not_elsewhere_classified_other_chemical_materials_and_chemical_goods_industry
  manufacturing_industry_chemicals_and_chemical_goods_industry_other_chemical_goods_industry_paint_varnish_and_lacquer_industry
  manufacturing_industry_chemicals_and_chemical_goods_industry_other_chemical_goods_industry_pesticide_raw_materials_and_pesticide_industry_including_growth_regulators
  manufacturing_industry_chemicals_and_chemical_goods_industry_other_chemical_goods_industry_pharmaceutical_and_herbal_medicine_industry
  manufacturing_industry_chemicals_and_chemical_goods_industry_other_chemical_goods_industry_soap_and_household_cleaning_materials_cosmetics_and_similar_industry
  manufacturing_industry_chemicals_and_chemical_goods_industry_synthetic_fiber_industry
  manufacturing_industry_coal_goods_petroleum_refining_and_natural_gas_processing_petroleum_refining_products_and_nuclear_fuel_industry_coal_goods_industry
  manufacturing_industry_coal_goods_petroleum_refining_and_natural_gas_processing_petroleum_refining_products_and_nuclear_fuel_industry_nuclear_fuel_processing
  manufacturing_industry_coal_goods_petroleum_refining_and_natural_gas_processing_petroleum_refining_products_and_nuclear_fuel_industry_petroleum_refining_natural_gas_processing_and_petroleum_refining_products_industry
  manufacturing_industry_food_and_beverage_industry_beverage_industry
  manufacturing_industry_food_and_beverage_industry_dairy_and_dairy_product_industry
  manufacturing_industry_food_and_beverage_industry_grain_flour_and_animal_feed_milling_industry_animal_feed_industry
  manufacturing_industry_food_and_beverage_industry_grain_flour_and_animal_feed_milling_industry_flour_and_starch_industry
  manufacturing_industry_food_and_beverage_industry_grain_flour_and_animal_feed_milling_industry_grain_seed_and_nut_milling_peeling_and_cleaning_industry_including_copra_production_copra_industry
  manufacturing_industry_food_and_beverage_industry_grain_flour_and_animal_feed_milling_industry_grain_seed_and_nut_milling_peeling_and_cleaning_industry_including_copra_production_other_milling_industry
  manufacturing_industry_food_and_beverage_industry_grain_flour_and_animal_feed_milling_industry_grain_seed_and_nut_milling_peeling_and_cleaning_industry_including_copra_production_rice_milling_and_polishing_industry
  manufacturing_industry_food_and_beverage_industry_other_food_industry_bread_and_similar_industry
  manufacturing_industry_food_and_beverage_industry_other_food_industry_chocolate_and_confectionery_industry
  manufacturing_industry_food_and_beverage_industry_other_food_industry_macaroni_noodles_spaghetti_vermicelli_bean_thread_and_similar_industry
  manufacturing_industry_food_and_beverage_industry_other_food_industry_other_food_industry_not_elsewhere_classified_coffee_processing_industry
  manufacturing_industry_food_and_beverage_industry_other_food_industry_other_food_industry_not_elsewhere_classified_food_industry_not_elsewhere_classified
  manufacturing_industry_food_and_beverage_industry_other_food_industry_other_food_industry_not_elsewhere_classified_soy_sauce_industry
  manufacturing_industry_food_and_beverage_industry_other_food_industry_other_food_industry_not_elsewhere_classified_tea_and_coffee_processing_industry_tea_processing_industry
  manufacturing_industry_food_and_beverage_industry_other_food_industry_other_food_industry_not_elsewhere_classified_tempeh_and_tofu_industry
  manufacturing_industry_food_and_beverage_industry_other_food_industry_sugar_and_sugar_processing_industry
  manufacturing_industry_food_and_beverage_industry_processing_and_preserving_of_meat_fish_fruits_vegetables_oils_and_fats_fish_and_other_aquatic_biota_processing_and_preservation_industry
  manufacturing_industry_food_and_beverage_industry_processing_and_preserving_of_meat_fish_fruits_vegetables_oils_and_fats_fruit_and_vegetable_processing_and_preservation_industry
  manufacturing_industry_food_and_beverage_industry_processing_and_preserving_of_meat_fish_fruits_vegetables_oils_and_fats_slaughtering_and_meat_preservation_animal_slaughtering_industry
  manufacturing_industry_food_and_beverage_industry_processing_and_preserving_of_meat_fish_fruits_vegetables_oils_and_fats_slaughtering_and_meat_preservation_meat_processing_and_preservation_industry
  manufacturing_industry_food_and_beverage_industry_processing_and_preserving_of_meat_fish_fruits_vegetables_oils_and_fats_vegetable_and_animal_oils_and_fats_industry_crude_palm_oil_cooking_oil_industry
  manufacturing_industry_food_and_beverage_industry_processing_and_preserving_of_meat_fish_fruits_vegetables_oils_and_fats_vegetable_and_animal_oils_and_fats_industry_palm_kernel_oil_cooking_oil_industry
  manufacturing_industry_food_and_beverage_industry_processing_and_preserving_of_meat_fish_fruits_vegetables_oils_and_fats_vegetable_and_animal_oils_and_fats_industry_vegetable_and_animal_crude_oil_edible_oil_industry
  manufacturing_industry_furniture_and_other_manufacturing_industry_furniture_industry
  manufacturing_industry_furniture_and_other_manufacturing_industry_other_manufacturing_industry
  manufacturing_industry_leather_leather_goods_and_footwear_industry_footwear_industry
  manufacturing_industry_leather_leather_goods_and_footwear_industry_leather_and_leather_goods_industry_including_artificial_leather
  manufacturing_industry_machinery_and_equipment_industry_general_machinery_industry
  manufacturing_industry_machinery_and_equipment_industry_household_appliances_industry_not_elsewhere_classified
  manufacturing_industry_machinery_and_equipment_industry_special_purpose_machinery_industry_agricultural_and_forestry_machinery_industry_and_maintenance_and
  manufacturing_industry_machinery_and_equipment_industry_special_purpose_machinery_industry_food_beverage_and_tobacco_processing_machinery_industry
  manufacturing_industry_machinery_and_equipment_industry_special_purpose_machinery_industry_mining_quarrying_and_construction_machinery_industry
  manufacturing_industry_machinery_and_equipment_industry_special_purpose_machinery_industry_other_special_purpose_machinery_industry
  manufacturing_industry_machinery_and_equipment_industry_special_purpose_machinery_industry_textile_textile_product_and_leather_goods_machinery_industry
  manufacturing_industry_medical_equipment_measuring_instruments_navigation_equipment_optical_equipment_clocks_and_watches_industry_clock_bell_and_similar_industry
  manufacturing_industry_medical_equipment_measuring_instruments_navigation_equipment_optical_equipment_clocks_and_watches_industry_medical_equipment_and_equipment_for_measuring_checking_testing_and_other_parts_industry_except_optical_equipment
  manufacturing_industry_medical_equipment_measuring_instruments_navigation_equipment_optical_equipment_clocks_and_watches_industry_optical_instrument_and_photographic_equipment_industry
  manufacturing_industry_metal_goods_industry_except_machinery_and_equipment_other_metal_goods_industry_and_metal_goods_manufacturing_service_activities_agricultural_carpentry_cutting_tools_and_other_metal_equipment_industry
  manufacturing_industry_metal_goods_industry_except_machinery_and_equipment_other_metal_goods_industry_and_metal_goods_manufacturing_service_activities_metal_goods_industry_not_elsewhere_classified
  manufacturing_industry_metal_goods_industry_except_machinery_and_equipment_prefabricated_metal_building_industry_tank_manufacturing_and_steam_generator_industry
  manufacturing_industry_motor_vehicle_industry_four_wheeled_or_more_motor_vehicle_body_industry
  manufacturing_industry_motor_vehicle_industry_four_wheeled_or_more_motor_vehicle_equipment_and_component_industry
  manufacturing_industry_motor_vehicle_industry_four_wheeled_or_more_motor_vehicle_industry
  manufacturing_industry_non_metallic_mineral_goods_industry_asbestos_goods_industry
  manufacturing_industry_non_metallic_mineral_goods_industry_cement_lime_and_gypsum_and_cement_and_lime_goods_industry
  manufacturing_industry_non_metallic_mineral_goods_industry_clay_ceramic_processing_industry
  manufacturing_industry_non_metallic_mineral_goods_industry_glass_and_glass_goods_industry
  manufacturing_industry_non_metallic_mineral_goods_industry_other_non_metallic_mineral_goods_industry
  manufacturing_industry_non_metallic_mineral_goods_industry_porcelain_goods_industry
  manufacturing_industry_non_metallic_mineral_goods_industry_stone_goods_industry
  manufacturing_industry_office_accounting_and_data_processing_machinery_and_equipment_industry_office_accounting_and_data_processing_machinery_and_equipment_industry
  manufacturing_industry_other_electrical_machinery_and_equipment_industry_electric_accumulator_and_battery_industry
  manufacturing_industry_other_electrical_machinery_and_equipment_industry_electric_and_telephone_cable_industry
  manufacturing_industry_other_electrical_machinery_and_equipment_industry_electric_motor_generator_and_transformer_industry
  manufacturing_industry_other_electrical_machinery_and_equipment_industry_electrical_control_and_distribution_equipment_industry
  manufacturing_industry_other_electrical_machinery_and_equipment_industry_electrical_equipment_industry_not_elsewhere_classified
  manufacturing_industry_other_electrical_machinery_and_equipment_industry_incandescent_light_bulb_and_lighting_lamp_industry
  manufacturing_industry_paper_paper_goods_and_the_like_industry_paper_and_paperboard_goods_industry_not_elsewhere_classified
  manufacturing_industry_paper_paper_goods_and_the_like_industry_paper_and_paperboard_packaging_and_box_industry
  manufacturing_industry_paper_paper_goods_and_the_like_industry_pulp_paper_and_paper_board_industry
  manufacturing_industry_publishing_printing_and_reproduction_of_recorded_media_industry_printing_industry_and_activities_related_to_printing_including_reproduction_reprinting
  manufacturing_industry_publishing_printing_and_reproduction_of_recorded_media_industry_publishing_industry
  manufacturing_industry_publishing_printing_and_reproduction_of_recorded_media_industry_reproduction_of_recorded_media_film_and_video
  manufacturing_industry_radio_television_and_communication_equipment_and_accessories_industry_communication_transmission_equipment_industry
  manufacturing_industry_radio_television_and_communication_equipment_and_accessories_industry_electronic_tube_and_valve_and_other_electronic_component_industry
  manufacturing_industry_radio_television_and_communication_equipment_and_accessories_industry_radio_television_sound_and_image_recording_equipment_and_similar_industry
  manufacturing_industry_ready_made_clothing_industry_fur_leather_finished_goods_and_fur_dyeing_ready_made_clothing_industry
  manufacturing_industry_ready_made_clothing_industry_ready_made_clothing_and_accessories_industry_except_fur_clothing
  manufacturing_industry_recycling_metal_goods_recycling
  manufacturing_industry_recycling_non_metal_goods_recycling
  manufacturing_industry_rubber_rubber_goods_and_plastic_goods_industry_plastic_goods_industry
  manufacturing_industry_rubber_rubber_goods_and_plastic_goods_industry_rubber_and_rubber_goods_industry_other_rubber_goods_industry
  manufacturing_industry_rubber_rubber_goods_and_plastic_goods_industry_rubber_and_rubber_goods_industry_rubber_industry_crumb_rubber_industry
  manufacturing_industry_rubber_rubber_goods_and_plastic_goods_industry_rubber_and_rubber_goods_industry_rubber_industry_rubber_remilling_industry
  manufacturing_industry_rubber_rubber_goods_and_plastic_goods_industry_rubber_and_rubber_goods_industry_rubber_industry_rubber_smoking_industry
  manufacturing_industry_textile_industry_kapok_industry
  manufacturing_industry_textile_industry_spinning_weaving_and_textile_finishing_industry
  manufacturing_industry_textile_industry_textile_and_carpet_finished_goods_industry
  manufacturing_industry_tobacco_processing_industry_tobacco_processing_industry_tobacco_processing_industry_cigarette_industry
  manufacturing_industry_tobacco_processing_industry_tobacco_processing_industry_tobacco_processing_industry_cigarette_seasoning_and_other_cigarette_accessories_industry
  manufacturing_industry_tobacco_processing_industry_tobacco_processing_industry_tobacco_processing_industry_tobacco_drying_and_processing_industry
  manufacturing_industry_transportation_equipment_industry_other_than_four_wheeled_or_more_motor_vehicles_aircraft_and_accessories_and_aircraft_repair_industry
  manufacturing_industry_transportation_equipment_industry_other_than_four_wheeled_or_more_motor_vehicles_other_transportation_equipment_industry_transportation_equipment_industry_not_elsewhere_classified
  manufacturing_industry_transportation_equipment_industry_other_than_four_wheeled_or_more_motor_vehicles_other_transportation_equipment_industry_two_and_three_wheeled_motor_vehicle_and_component_and_accessory_industry
  manufacturing_industry_transportation_equipment_industry_other_than_four_wheeled_or_more_motor_vehicles_railway_parts_and_accessories_and_railway_repair_industry
  manufacturing_industry_transportation_equipment_industry_other_than_four_wheeled_or_more_motor_vehicles_ship_and_boat_building_and_repair_industry
  manufacturing_industry_wood_wood_products_excluding_furniture_and_woven_goods_from_rattan_bamboo_and_the_like_industry_sawmilling_and_preservation_of_wood_rattan_bamboo_and_the_like_industry
  manufacturing_industry_wood_wood_products_excluding_furniture_and_woven_goods_from_rattan_bamboo_and_the_like_industry_wood_goods_and_woven_goods_from_rattan_bamboo_and_the_like_industry_plywood_veneer_and_the_like_industry
  manufacturing_industry_wood_wood_products_excluding_furniture_and_woven_goods_from_rattan_bamboo_and_the_like_industry_wood_goods_and_woven_goods_from_rattan_bamboo_and_the_like_industry_weaving_handicraft_wood_carving_and_other_wood_goods_industry
  mining_and_quarrying_coal_mining_peat_extraction_coal_gasification_and_coal_briquette_manufacturing_coal_briquette_manufacturing
  mining_and_quarrying_coal_mining_peat_extraction_coal_gasification_and_coal_briquette_manufacturing_coal_mining_peat_extraction_and_coal_gasification
  mining_and_quarrying_crude_petroleum_and_natural_gas_mining_and_mining_services_crude_petroleum_and_natural_gas_mining_and_geothermal_energy_exploitation_crude_petroleum_and_natural_gas_mining_and_geothermal_energy_exploitation
  mining_and_quarrying_crude_petroleum_and_natural_gas_mining_and_mining_services_crude_petroleum_and_natural_gas_mining_and_geothermal_energy_exploitation_crude_petroleum_and_natural_gas_mining_and_geothermal_energy_exploitation_crude_petroleum_and_natural_gas_mining
  mining_and_quarrying_metal_ore_mining_iron_sand_and_iron_ore_mining
  mining_and_quarrying_metal_ore_mining_metal_and_tin_ore_mining_metal_and_tin_ore_miningbauxite_ore_mining
  mining_and_quarrying_metal_ore_mining_metal_and_tin_ore_mining_metal_and_tin_ore_miningcopper_ore_mining
  mining_and_quarrying_metal_ore_mining_metal_and_tin_ore_mining_metal_and_tin_ore_mininggold_and_silver_mining_gold_mining
  mining_and_quarrying_metal_ore_mining_metal_and_tin_ore_mining_metal_and_tin_ore_mininggold_and_silver_mining_silver_mining
  mining_and_quarrying_metal_ore_mining_metal_and_tin_ore_mining_metal_and_tin_ore_miningnickel_ore_mining
  mining_and_quarrying_metal_ore_mining_metal_and_tin_ore_mining_metal_and_tin_ore_miningother_minerals_not_containing_iron_ore
  mining_and_quarrying_metal_ore_mining_metal_and_tin_ore_mining_metal_and_tin_ore_miningtin_ore_mining
  mining_and_quarrying_quarrying_of_stone_clay_and_sand_and_mining_of_minerals_and_chemical_materials_mining_and_quarrying_not_elsewhere_classified_mining_of_minerals_chemical_materials_and_fertilizers
  mining_and_quarrying_quarrying_of_stone_clay_and_sand_and_mining_of_minerals_and_chemical_materials_mining_and_quarrying_not_elsewhere_classified_other_mining_and_quarrying
  mining_and_quarrying_quarrying_of_stone_clay_and_sand_and_mining_of_minerals_and_chemical_materials_mining_and_quarrying_not_elsewhere_classified_salt_extraction
  mining_and_quarrying_quarrying_of_stone_clay_and_sand_and_mining_of_minerals_and_chemical_materials_quarrying_of_stone_clay_and_sand_quarrying_of_stone_clay_and_sand
  mining_and_quarrying_uranium_and_thorium_ore_mining
  other_livestock_breeding_and_cultivation
  private_households_with_employed_persons_private_households_with_employed_persons_private_households_with_employed_persons_4
  processing_industry_food_and_beverage_industry_processing_and_preservation_of_meat_fish_fruits_vegetables_oils_and_fats_vegetable_and_animal_edible_oil_and_fat_industry_coconut_cooking_oil_industry
  processing_industry_textile_industry_knitting_industry_knitting_industry
  public_administration_defence_and_compulsory_social_security_public_administration_defence_and_compulsory_social_security_1__public_administration_and_economic_and_social_policy
  public_administration_defence_and_compulsory_social_security_public_administration_defence_and_compulsory_social_security_2__foreign_affairs_defence_and_security
  public_administration_defence_and_compulsory_social_security_public_administration_defence_and_compulsory_social_security_3__compulsory_social_security
  real_estate_renting_and_business_activities_computer_and_related_activities_data_processing
  real_estate_renting_and_business_activities_computer_and_related_activities_database_activities
  real_estate_renting_and_business_activities_computer_and_related_activities_hardware_consulting_services
  real_estate_renting_and_business_activities_computer_and_related_activities_maintenance_and_repair_of_office_accounting_and_computing_machinery
  real_estate_renting_and_business_activities_computer_and_related_activities_other_computer_related_activities
  real_estate_renting_and_business_activities_computer_and_related_activities_software_consulting_services
  real_estate_renting_and_business_activities_other_business_activities_advertising_services
  real_estate_renting_and_business_activities_other_business_activities_architectural_consulting_services_engineering_and_technical_activities_and_analysis_and_testing
  real_estate_renting_and_business_activities_other_business_activities_legal_accounting_and_bookkeeping_tax_consulting_market_research_and_business_and_management_consulting_services
  real_estate_renting_and_business_activities_other_business_activities_other_business_services_not_elsewhere_classified
  real_estate_renting_and_business_activities_real_estate_renting_and_business_activities_real_estate_on_a_fee_or_contract_basis
  real_estate_renting_and_business_activities_real_estate_renting_and_business_activities_real_estate_owned_or_leased_and_dormitories_flat_apartment_residential_real_estate
  real_estate_renting_and_business_activities_real_estate_renting_and_business_activities_real_estate_owned_or_leased_and_dormitories_medium_large_or_luxury_residential_real_estate_type_above_70
  real_estate_renting_and_business_activities_real_estate_renting_and_business_activities_real_estate_owned_or_leased_and_dormitories_office_building_real_estate
  real_estate_renting_and_business_activities_real_estate_renting_and_business_activities_real_estate_owned_or_leased_and_dormitories_other_real_estate
  real_estate_renting_and_business_activities_real_estate_renting_and_business_activities_real_estate_owned_or_leased_and_dormitories_shop_houses_ruko_or_office_houses_rukan_building_real_estate
  real_estate_renting_and_business_activities_real_estate_renting_and_business_activities_real_estate_owned_or_leased_and_dormitories_shopping_center_real_estate_malls_plazas
  real_estate_renting_and_business_activities_real_estate_renting_and_business_activities_real_estate_owned_or_leased_and_dormitories_simple_residential_real_estate_other_than_perumnas_up_to_type_21
  real_estate_renting_and_business_activities_real_estate_renting_and_business_activities_real_estate_owned_or_leased_and_dormitories_simple_residential_real_estate_other_than_perumnas_up_to_type_22_to_70
  real_estate_renting_and_business_activities_real_estate_renting_and_business_activities_real_estate_owned_or_leased_and_dormitories_simple_residential_real_estate_perumnas
  real_estate_renting_and_business_activities_real_estate_renting_and_business_activities_tourism_area_and_provision_of_water_tourism_facilities_tourism_area
  real_estate_renting_and_business_activities_rental_of_machinery_and_equipment_without_operator_household_and_personal_goods_rental_of_household_and_personal_goods_not_elsewhere_classified
  real_estate_renting_and_business_activities_rental_of_machinery_and_equipment_without_operator_household_and_personal_goods_rental_of_other_machinery_and_equipment_rental_of_agricultural_machinery_and_equipment
  real_estate_renting_and_business_activities_rental_of_machinery_and_equipment_without_operator_household_and_personal_goods_rental_of_other_machinery_and_equipment_rental_of_construction_and_civil_engineering_machinery_and_equipment
  real_estate_renting_and_business_activities_rental_of_machinery_and_equipment_without_operator_household_and_personal_goods_rental_of_other_machinery_and_equipment_rental_of_office_machinery_and_equipment_including_computers
  real_estate_renting_and_business_activities_rental_of_machinery_and_equipment_without_operator_household_and_personal_goods_rental_of_other_machinery_and_equipment_rental_of_other_machinery_and_equipment_not_elsewhere_classified
  real_estate_renting_and_business_activities_rental_of_machinery_and_equipment_without_operator_household_and_personal_goods_rental_of_transport_equipment_rental_of_air_transport_equipment
  real_estate_renting_and_business_activities_rental_of_machinery_and_equipment_without_operator_household_and_personal_goods_rental_of_transport_equipment_rental_of_land_transport_equipment
  real_estate_renting_and_business_activities_rental_of_machinery_and_equipment_without_operator_household_and_personal_goods_rental_of_transport_equipment_rental_of_water_transport_equipment
  real_estate_renting_and_business_activities_research_and_development_private_research_and_development_of_natural_sciences_and_technology
  real_estate_renting_and_business_activities_research_and_development_private_research_and_development_of_social_sciences_and_humanities
  retail_trade_except_cars_and_motorcycles_retail_trade_of_used_goods
  transportation_storage_and_communications_air_transport_non_scheduled_air_transport
  transportation_storage_and_communications_air_transport_scheduled_air_transport
  transportation_storage_and_communications_air_transport_special_air_transport
  transportation_storage_and_communications_land_transport_and_transport_via_pipelines_rail_transport
  transportation_storage_and_communications_land_transport_and_transport_via_pipelines_road_transport_non_scheduled_road_passenger_transport
  transportation_storage_and_communications_land_transport_and_transport_via_pipelines_road_transport_road_freight_transport
  transportation_storage_and_communications_land_transport_and_transport_via_pipelines_road_transport_scheduled_road_passenger_transport
  transportation_storage_and_communications_land_transport_and_transport_via_pipelines_transport_via_pipelines
  transportation_storage_and_communications_post_and_telecommunications_national_post_postal_service_units_and_courier_services
  transportation_storage_and_communications_post_and_telecommunications_special_telecommunications
  transportation_storage_and_communications_post_and_telecommunications_telecommunication_networks
  transportation_storage_and_communications_post_and_telecommunications_telecommunication_services
  transportation_storage_and_communications_support_and_auxiliary_transport_activities_and_travel_agency_activities_cargo_handling_services
  transportation_storage_and_communications_support_and_auxiliary_transport_activities_and_travel_agency_activities_other_support_transport_activities_except_cargo_handling_and_warehousing
  transportation_storage_and_communications_support_and_auxiliary_transport_activities_and_travel_agency_activities_shipping_and_packaging_services
  transportation_storage_and_communications_support_and_auxiliary_transport_activities_and_travel_agency_activities_travel_agency_activities
  transportation_storage_and_communications_support_and_auxiliary_transport_activities_and_travel_agency_activities_warehousing_cold_storage_services_and_bonded_zone_services
  transportation_storage_and_communications_water_transport_inland_water_transport_and_ferry_transport_domestic_ferry_transport
  transportation_storage_and_communications_water_transport_inland_water_transport_and_ferry_transport_inland_water_transport
  transportation_storage_and_communications_water_transport_sea_transport_domestic_sea_transport
  transportation_storage_and_communications_water_transport_sea_transport_international_sea_transport
  wholesale_and_retail_trade_car_motorcycle_sales_and_vehicle_fuel_retail_sales_car_sales
  wholesale_and_retail_trade_car_motorcycle_sales_and_vehicle_fuel_retail_sales_car_spare_parts_and_accessories_sales
  wholesale_and_retail_trade_car_motorcycle_sales_and_vehicle_fuel_retail_sales_motorcycle_and_spare_parts_and_accessories_sales_motorcycle_sales
  wholesale_and_retail_trade_car_motorcycle_sales_and_vehicle_fuel_retail_sales_motorcycle_and_spare_parts_and_accessories_sales_motorcycle_spare_parts_and_accessories_sales
  wholesale_and_retail_trade_car_motorcycle_sales_and_vehicle_fuel_retail_sales_vehicle_fuel_retail_trade
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_domestic_wholesale_trade_of_agricultural_products_live_animals_food_beverages_and_tobacco_domestic_wholesale_trade_of_agricultural_products_live_animals_domestic_wholesale_trade_of_agricultural_products_clove_trade
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_domestic_wholesale_trade_of_agricultural_products_live_animals_food_beverages_and_tobacco_domestic_wholesale_trade_of_agricultural_products_live_animals_domestic_wholesale_trade_of_agricultural_products_corn_trade
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_domestic_wholesale_trade_of_agricultural_products_live_animals_food_beverages_and_tobacco_domestic_wholesale_trade_of_agricultural_products_live_animals_domestic_wholesale_trade_of_agricultural_products_cotton_trade
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_domestic_wholesale_trade_of_agricultural_products_live_animals_food_beverages_and_tobacco_domestic_wholesale_trade_of_agricultural_products_live_animals_domestic_wholesale_trade_of_agricultural_products_other_domestic_wholesale_trade_of_agricultural_products
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_domestic_wholesale_trade_of_agricultural_products_live_animals_food_beverages_and_tobacco_domestic_wholesale_trade_of_agricultural_products_live_animals_domestic_wholesale_trade_of_agricultural_products_pepper_trade
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_domestic_wholesale_trade_of_agricultural_products_live_animals_food_beverages_and_tobacco_domestic_wholesale_trade_of_agricultural_products_live_animals_domestic_wholesale_trade_of_agricultural_products_rubber_trade
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_domestic_wholesale_trade_of_agricultural_products_live_animals_food_beverages_and_tobacco_domestic_wholesale_trade_of_agricultural_products_live_animals_domestic_wholesale_trade_of_agricultural_products_tobacco_trade
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_domestic_wholesale_trade_of_agricultural_products_live_animals_food_beverages_and_tobacco_domestic_wholesale_trade_of_agricultural_products_live_animals_domestic_wholesale_trade_of_fishery_products
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_domestic_wholesale_trade_of_agricultural_products_live_animals_food_beverages_and_tobacco_domestic_wholesale_trade_of_agricultural_products_live_animals_domestic_wholesale_trade_of_forestry_and_hunting_products_other_domestic_wholesale_trade_of_forestry_and_hunting_products
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_domestic_wholesale_trade_of_agricultural_products_live_animals_food_beverages_and_tobacco_domestic_wholesale_trade_of_agricultural_products_live_animals_domestic_wholesale_trade_of_forestry_and_hunting_products_wood_trade
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_domestic_wholesale_trade_of_agricultural_products_live_animals_food_beverages_and_tobacco_domestic_wholesale_trade_of_agricultural_products_live_animals_domestic_wholesale_trade_of_live_animals
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_domestic_wholesale_trade_of_agricultural_products_live_animals_food_beverages_and_tobacco_other_wholesale_trade_of_household_goods
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_domestic_wholesale_trade_of_agricultural_products_live_animals_food_beverages_and_tobacco_wholesale_trade_of_food_beverages_and_tobacco_domestic_cigarette_trade
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_domestic_wholesale_trade_of_agricultural_products_live_animals_food_beverages_and_tobacco_wholesale_trade_of_food_beverages_and_tobacco_domestic_coffee_trade
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_domestic_wholesale_trade_of_agricultural_products_live_animals_food_beverages_and_tobacco_wholesale_trade_of_food_beverages_and_tobacco_domestic_copra_trade
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_domestic_wholesale_trade_of_agricultural_products_live_animals_food_beverages_and_tobacco_wholesale_trade_of_food_beverages_and_tobacco_domestic_rice_trade
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_domestic_wholesale_trade_of_agricultural_products_live_animals_food_beverages_and_tobacco_wholesale_trade_of_food_beverages_and_tobacco_domestic_salt_trade
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_domestic_wholesale_trade_of_agricultural_products_live_animals_food_beverages_and_tobacco_wholesale_trade_of_food_beverages_and_tobacco_domestic_sugar_trade
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_domestic_wholesale_trade_of_agricultural_products_live_animals_food_beverages_and_tobacco_wholesale_trade_of_food_beverages_and_tobacco_domestic_tea_trade
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_domestic_wholesale_trade_of_agricultural_products_live_animals_food_beverages_and_tobacco_wholesale_trade_of_food_beverages_and_tobacco_other_domestic_food_beverages_and_tobacco_trade
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_domestic_wholesale_trade_of_agricultural_products_live_animals_food_beverages_and_tobacco_wholesale_trade_of_textiles_ready_made_clothing_and_leather
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_other_wholesale_domestic_trade_not_elsewhere_classified
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_other_wholesale_domestic_trade_of_newsprint
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_wholesale_of_machinery_spare_parts_and_accessories
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_wholesale_trade_based_on_fees_or_contracts
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_wholesale_trade_of_intermediate_products_other_than_agricultural_products_used_goods_and_unused_waste_scrap_domestic_cement_trade
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_wholesale_trade_of_intermediate_products_other_than_agricultural_products_used_goods_and_unused_waste_scrap_domestic_concrete_iron_trade
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_wholesale_trade_of_intermediate_products_other_than_agricultural_products_used_goods_and_unused_waste_scrap_other_domestic_construction_materials_trade
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_wholesale_trade_of_intermediate_products_other_than_agricultural_products_used_goods_and_unused_waste_scrap_wholesale_trade
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_wholesale_trade_of_intermediate_products_other_than_agricultural_products_used_goods_and_unused_waste_scrap_wholesale_trade_of_gaseous_liquid_and_solid_fuels_and_similar_products
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_wholesale_trade_of_intermediate_products_other_than_agricultural_products_used_goods_and_unused_waste_scrap_wholesale_trade_of_intermediate_products_used_goods_and_unused_waste_scrap_domestic_fertilizer_and_pesticide_trade
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_car_and_motorcycle_trade_wholesale_trade_of_intermediate_products_other_than_agricultural_products_used_goods_and_unused_waste_scrap_wholesale_trade_of_metals_and_metal_ores
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_trade_of_cars_and_motorcycles_domestic_wholesale_trade_of_agricultural_products_live_animals_food_beverages_and_tobacco_domestic_wholesale_trade_of_agricultural_products_live_animals_domestic_wholesale_trade_of_agricultural_products_per
  wholesale_and_retail_trade_domestic_wholesale_trade_other_than_export_and_import_except_trade_of_cars_and_motorcycles_domestic_wholesale_trade_of_agricultural_products_live_animals_food_beverages_and_tobacco_wholesale_trade_of_food
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_export_trade_based_on_fees_or_contracts
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_export_trade_of_household_goods_export_trade_of_textiles_ready_made_clothing_and_leather_export_trade_of_leather
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_export_trade_of_household_goods_export_trade_of_textiles_ready_made_clothing_and_leather_export_trade_of_ready_made_clothing
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_export_trade_of_household_goods_export_trade_of_textiles_ready_made_clothing_and_leather_export_trade_of_textiles
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_export_trade_of_intermediate_products_other_than_agricultural_products_used_goods_and_unused_waste_scrap_export_trade_of_construction_materials_except_mining_products_export_trade_of_plywood
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_export_trade_of_intermediate_products_other_than_agricultural_products_used_goods_and_unused_waste_scrap_export_trade_of_construction_materials_except_mining_products_other_export_trade_of_construction_materials_except_mining_products
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_export_trade_of_intermediate_products_other_than_agricultural_products_used_goods_and_unused_waste_scrap_export_trade_of_intermediate_products_used_goods_and_unused_waste_scrap
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_export_trade_of_intermediate_products_other_than_agricultural_products_used_goods_and_unused_waste_scrap_export_trade_of_metals_and_metal_ores_mining_and_quarrying_products_export_trade_of_coal
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_export_trade_of_intermediate_products_other_than_agricultural_products_used_goods_and_unused_waste_scrap_export_trade_of_metals_and_metal_ores_mining_and_quarrying_products_export_trade_of_metal_ores_other_than_tin
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_export_trade_of_intermediate_products_other_than_agricultural_products_used_goods_and_unused_waste_scrap_export_trade_of_metals_and_metal_ores_mining_and_quarrying_products_export_trade_of_tin_ore
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_export_trade_of_intermediate_products_other_than_agricultural_products_used_goods_and_unused_waste_scrap_export_trade_of_metals_and_metal_ores_mining_and_quarrying_products_other_export_trade_of_metals_and_metal_ores_mining_and_quarrying_products
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_export_trade_of_machinery_spare_parts_and_accessories
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_export_trade_of_raw_materials_from_agriculture_live_animals_food_beverages_and_tobacco_export_trade_of_food_beverages_and_tobacco_export_trade_of_ground_coffee
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_export_trade_of_raw_materials_from_agriculture_live_animals_food_beverages_and_tobacco_export_trade_of_food_beverages_and_tobacco_export_trade_of_processed_shrimp
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_export_trade_of_raw_materials_from_agriculture_live_animals_food_beverages_and_tobacco_export_trade_of_food_beverages_and_tobacco_export_trade_of_tea
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_export_trade_of_raw_materials_from_agriculture_live_animals_food_beverages_and_tobacco_export_trade_of_food_beverages_and_tobacco_export_trade_of_tobacco
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_export_trade_of_raw_materials_from_agriculture_live_animals_food_beverages_and_tobacco_export_trade_of_food_beverages_and_tobacco_other_export_trade_of_food_and_beverages
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_export_trade_of_raw_materials_from_agriculture_live_animals_food_beverages_and_tobacco_export_trade_of_raw_materials_from_agriculture_and_live_animals_export_trade_of_fishery_products
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_export_trade_of_raw_materials_from_agriculture_live_animals_food_beverages_and_tobacco_export_trade_of_raw_materials_from_agriculture_and_live_animals_export_trade_of_forestry_and_hunting_export_trade_of_forest_products_other_than_wood_and_rattan
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_export_trade_of_raw_materials_from_agriculture_live_animals_food_beverages_and_tobacco_export_trade_of_raw_materials_from_agriculture_and_live_animals_export_trade_of_forestry_and_hunting_export_trade_of_rattan
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_export_trade_of_raw_materials_from_agriculture_live_animals_food_beverages_and_tobacco_export_trade_of_raw_materials_from_agriculture_and_live_animals_export_trade_of_forestry_and_hunting_export_trade_of_wood
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_export_trade_of_raw_materials_from_agriculture_live_animals_food_beverages_and_tobacco_export_trade_of_raw_materials_from_agriculture_and_live_animals_export_trade_of_raw_materials_from_agriculture_export_trade_of_food_crops_and_plantation_products
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_export_trade_of_raw_materials_from_agriculture_live_animals_food_beverages_and_tobacco_export_trade_of_raw_materials_from_agriculture_and_live_animals_export_trade_of_raw_materials_from_agriculture_export_trade_of_palm_oil_seeds
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_export_trade_of_raw_materials_from_agriculture_live_animals_food_beverages_and_tobacco_export_trade_of_raw_materials_from_agriculture_and_live_animals_export_trade_of_raw_materials_from_agriculture_other_export_trade_of_raw_materials_from_agriculture
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_other_export_trade_export_trade_of_semi_finished_goods_from_agriculture_plantation_and_forestry_export_trade_of_coffee_beans
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_other_export_trade_export_trade_of_semi_finished_goods_from_agriculture_plantation_and_forestry_export_trade_of_copra_meal
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_other_export_trade_export_trade_of_semi_finished_goods_from_agriculture_plantation_and_forestry_export_trade_of_palm_kernel_oil
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_other_export_trade_export_trade_of_semi_finished_goods_from_agriculture_plantation_and_forestry_export_trade_of_pepper
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_other_export_trade_export_trade_of_semi_finished_goods_from_agriculture_plantation_and_forestry_export_trade_of_rubber
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_other_export_trade_export_trade_of_semi_finished_goods_from_agriculture_plantation_and_forestry_export_trade_of_sawn_timber
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_other_export_trade_export_trade_of_semi_finished_goods_from_agriculture_plantation_and_forestry_export_trade_of_tobacco
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_other_export_trade_export_trade_of_semi_finished_goods_from_agriculture_plantation_and_forestry_other_export_trade_of_agricultural_plantation_and_forestry_products
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_other_export_trade_of_household_goods_other_export_trade_of_household_goods
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_other_export_trade_other_export_trade_export_trade_not_elsewhere_classified
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_other_export_trade_other_export_trade_export_trade_of_construction_services
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_other_export_trade_other_export_trade_export_trade_of_handicrafts_from_wood_and_rattan
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_other_export_trade_other_export_trade_export_trade_of_handicrafts_other_than_wood_and_rattan
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_other_export_trade_other_export_trade_of_semi_finished_goods_export_trade_of_processed_animals
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_other_export_trade_other_export_trade_of_semi_finished_goods_export_trade_of_semi_finished_mining_products
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_other_export_trade_other_export_trade_of_semi_finished_goods_other_export_trade_of_food_ingredients
  wholesale_and_retail_trade_export_trade_except_cars_and_motorcycles_other_export_trade_other_export_trade_of_semi_finished_goods_other_export_trade_of_semi_finished_goods
  wholesale_and_retail_trade_export_trade_except_trade_of_cars_and_motorcycles_export_trade_of_agricultural_raw_materials_live_animals_food_beverages_and_tobacco_export_trade_of_agricultural_raw_materials_and_live_animals_export_trade_of_live_animals
  wholesale_and_retail_trade_export_trade_except_trade_of_cars_and_motorcycles_export_trade_of_intermediate_products_non_agricultural_products_used_goods_and_unused_remains_scrap_export_trade_of_gas_liquid_and_solid_fuels_and_similar_products
  wholesale_and_retail_trade_export_trade_except_trade_of_cars_and_motorcycles_other_export_trade_export_trade_of_semi_finished_goods_from_agriculture_plantations_and_forestry_export_trade_of_crude_palm_oil
  wholesale_and_retail_trade_import_trade_except_cars_and_motorcycles_import_trade_based_on_fees_or_contracts
  wholesale_and_retail_trade_import_trade_except_cars_and_motorcycles_import_trade_of_household_goods_import_trade_of_textiles_ready_made_clothing_and_leather
  wholesale_and_retail_trade_import_trade_except_cars_and_motorcycles_import_trade_of_household_goods_other_import_trade_of_household_goods
  wholesale_and_retail_trade_import_trade_except_cars_and_motorcycles_import_trade_of_intermediate_products_other_than_agricultural_products_used_goods_and_unused_waste_scrap_import_trade_of_construction_materials_import_trade_of_reinforced_concrete_iron
  wholesale_and_retail_trade_import_trade_except_cars_and_motorcycles_import_trade_of_intermediate_products_other_than_agricultural_products_used_goods_and_unused_waste_scrap_import_trade_of_construction_materials_other_import_trade_of_construction_materials
  wholesale_and_retail_trade_import_trade_except_cars_and_motorcycles_import_trade_of_intermediate_products_other_than_agricultural_products_used_goods_and_unused_waste_scrap_import_trade_of_gaseous_liquid_and_solid_fuels_and_similar_products
  wholesale_and_retail_trade_import_trade_except_cars_and_motorcycles_import_trade_of_intermediate_products_other_than_agricultural_products_used_goods_and_unused_waste_scrap_import_trade_of_intermediate_goods_used_goods_and_unused_waste_scrap_import_trade_of_fertilizers_and_pesticides
  wholesale_and_retail_trade_import_trade_except_cars_and_motorcycles_import_trade_of_intermediate_products_other_than_agricultural_products_used_goods_and_unused_waste_scrap_import_trade_of_intermediate_goods_used_goods_and_unused_waste_scrap_import_trade_of_pharmaceuticals
  wholesale_and_retail_trade_import_trade_except_cars_and_motorcycles_import_trade_of_intermediate_products_other_than_agricultural_products_used_goods_and_unused_waste_scrap_import_trade_of_intermediate_goods_used_goods_and_unused_waste_scrap_other_import_trade_of_intermediate_goods
  wholesale_and_retail_trade_import_trade_except_cars_and_motorcycles_import_trade_of_intermediate_products_other_than_agricultural_products_used_goods_and_unused_waste_scrap_import_trade_of_metals_and_metal_ores
  wholesale_and_retail_trade_import_trade_except_cars_and_motorcycles_import_trade_of_machinery_spare_parts_and_accessories_import_trade_of_industrial_spare_parts
  wholesale_and_retail_trade_import_trade_except_cars_and_motorcycles_import_trade_of_machinery_spare_parts_and_accessories_other_import_trade
  wholesale_and_retail_trade_import_trade_except_cars_and_motorcycles_import_trade_of_raw_materials_from_agriculture_live_animals_food_beverages_and_tobacco_import_trade_of_food_beverages_and_tobacco_import_trade_of_rice
  wholesale_and_retail_trade_import_trade_except_cars_and_motorcycles_import_trade_of_raw_materials_from_agriculture_live_animals_food_beverages_and_tobacco_import_trade_of_food_beverages_and_tobacco_import_trade_of_sugar
  wholesale_and_retail_trade_import_trade_except_cars_and_motorcycles_import_trade_of_raw_materials_from_agriculture_live_animals_food_beverages_and_tobacco_import_trade_of_food_beverages_and_tobacco_other_import_trade_of_food_beverages_and_tobacco
  wholesale_and_retail_trade_import_trade_except_cars_and_motorcycles_import_trade_of_raw_materials_from_agriculture_live_animals_food_beverages_and_tobacco_import_trade_of_raw_materials_from_agriculture_and_live_animals_import_trade_of_cloves
  wholesale_and_retail_trade_import_trade_except_cars_and_motorcycles_import_trade_of_raw_materials_from_agriculture_live_animals_food_beverages_and_tobacco_import_trade_of_raw_materials_from_agriculture_and_live_animals_import_trade_of_corn
  wholesale_and_retail_trade_import_trade_except_cars_and_motorcycles_import_trade_of_raw_materials_from_agriculture_live_animals_food_beverages_and_tobacco_import_trade_of_raw_materials_from_agriculture_and_live_animals_import_trade_of_soybeans
  wholesale_and_retail_trade_import_trade_except_cars_and_motorcycles_import_trade_of_raw_materials_from_agriculture_live_animals_food_beverages_and_tobacco_import_trade_of_raw_materials_from_agriculture_and_live_animals_import_trade_of_wheat_seeds
  wholesale_and_retail_trade_import_trade_except_cars_and_motorcycles_other_import_trade
  wholesale_and_retail_trade_import_trade_except_trade_of_cars_and_motorcycles_import_trade_of_agricultural_raw_materials_live_animals_food_beverages_and_tobacco_import_trade_of_agricultural_raw_materials_and_live_animals_import_trade_of_agricultural_raw_materials_and_other_live_animals
  wholesale_and_retail_trade_retail_trade_except_cars_and_motorcycles_other_retail_trade_retail_trade_by_peddling
  wholesale_and_retail_trade_retail_trade_except_cars_and_motorcycles_other_retail_trade_retail_trade_through_media
  wholesale_and_retail_trade_retail_trade_except_cars_and_motorcycles_other_sidewalk_retail_trade
  wholesale_and_retail_trade_retail_trade_except_cars_and_motorcycles_retail_trade_of_food_beverages_or_tobacco_commodities_retail_trade_of_food_beverages_or_tobacco_commodities_from_processing_industry_products
  wholesale_and_retail_trade_retail_trade_except_cars_and_motorcycles_retail_trade_of_food_beverages_or_tobacco_commodities_retail_trade_of_food_commodities_from_agricultural_products
  wholesale_and_retail_trade_retail_trade_except_cars_and_motorcycles_retail_trade_of_non_food_beverages_or_tobacco_commodities_other_retail_trade_of_commodities_non
  wholesale_and_retail_trade_retail_trade_except_cars_and_motorcycles_retail_trade_of_non_food_beverages_or_tobacco_commodities_retail_trade_of_chemicals_pharmaceuticals_cosmetics_and_laboratory_equipment
  wholesale_and_retail_trade_retail_trade_except_cars_and_motorcycles_retail_trade_of_non_food_beverages_or_tobacco_commodities_retail_trade_of_construction_materials
  wholesale_and_retail_trade_retail_trade_except_cars_and_motorcycles_retail_trade_of_non_food_beverages_or_tobacco_commodities_retail_trade_of_fuels_and_lubricating_oils
  wholesale_and_retail_trade_retail_trade_except_cars_and_motorcycles_retail_trade_of_non_food_beverages_or_tobacco_commodities_retail_trade_of_handicrafts_children_toys_and_paintings
  wholesale_and_retail_trade_retail_trade_except_cars_and_motorcycles_retail_trade_of_non_food_beverages_or_tobacco_commodities_retail_trade_of_household_equipment_and_kitchenware
  wholesale_and_retail_trade_retail_trade_except_cars_and_motorcycles_retail_trade_of_non_food_beverages_or_tobacco_commodities_retail_trade_of_machinery_except_cars_and_motorcycles_and_spare_parts_parts_including_transportation_equipment
  wholesale_and_retail_trade_retail_trade_except_cars_and_motorcycles_retail_trade_of_non_food_beverages_or_tobacco_commodities_retail_trade_of_paper_paper_goods_stationery_printed_matter_sports_equipment_musical_instruments_photographic_equipment_computers
  wholesale_and_retail_trade_retail_trade_except_cars_and_motorcycles_retail_trade_of_non_food_beverages_or_tobacco_commodities_retail_trade_of_textiles_ready_made_clothing_footwear_and_personal_goods
  wholesale_and_retail_trade_retail_trade_except_cars_and_motorcycles_retail_trade_of_various_goods_retail_trade_of_various_goods_dominated_by_food_beverages_and_tobacco
  wholesale_and_retail_trade_retail_trade_except_cars_and_motorcycles_retail_trade_of_various_goods_retail_trade_of_various_goods_dominated_by_non_food_beverages_and_tobacco_goods
  wholesale_and_retail_trade_retail_trade_except_cars_and_motorcycles_sidewalk_retail_trade_sidewalk_retail_trade_of_chemicals_pharmaceuticals_cosmetics_and_laboratory_equipment
  wholesale_and_retail_trade_retail_trade_except_cars_and_motorcycles_sidewalk_retail_trade_sidewalk_retail_trade_of_commodities_from_agricultural_products
  wholesale_and_retail_trade_retail_trade_except_cars_and_motorcycles_sidewalk_retail_trade_sidewalk_retail_trade_of_fuels_and_lubricants
  wholesale_and_retail_trade_retail_trade_except_cars_and_motorcycles_sidewalk_retail_trade_sidewalk_retail_trade_of_handicrafts_children_toys_and_paintings
  wholesale_and_retail_trade_retail_trade_except_cars_and_motorcycles_sidewalk_retail_trade_sidewalk_retail_trade_of_household_equipment_and_kitchenware
  wholesale_and_retail_trade_retail_trade_except_cars_and_motorcycles_sidewalk_retail_trade_sidewalk_retail_trade_of_paper_paper_goods_stationery_printed_matter_sports_equipment_musical_instruments_photographic_equipment_and_computers
  wholesale_and_retail_trade_retail_trade_except_cars_and_motorcycles_sidewalk_retail_trade_sidewalk_retail_trade_of_processed_food_and_beverage_commodities
  wholesale_and_retail_trade_retail_trade_except_cars_and_motorcycles_sidewalk_retail_trade_sidewalk_retail_trade_of_textiles_ready_made_clothing_footwear_and_personal_goods
  wholesale_and_retail_trade_retail_trade_except_cars_and_motorcycles_sidewalk_retail_trade_sidewalk_retail_trade_of_used_goods
}

enum Education {
  "Bachelors or Equivalent Level"
  bachelors_or_equivalent_level
  "Doctoral or Equivalent Level"
  doctoral_or_equivalent_level
  "Early Childhood Education"
  early_childhood_education
  "Lower Secondary Education"
  lower_secondary_education
  "Masters or Equivalent Level"
  masters_or_equivalent_level
  "No Schooling"
  no_schooling
  "Not Elsewhere Classified"
  not_elsewhere_classified
  "Primary Education"
  primary_education
  "Upper Secondary Education"
  upper_secondary_education
}

enum EmergencyRelation {
  brother_sister
  child
  domestic_partner
  father_mother
  friend
  grandfather_grandmother
  other
  relative
  spouse
}

enum FamilyIncome {
  above_5_million
  up_to_1_million
  up_to_2_million
  up_to_3_million
  up_to_4_million
  up_to_5_million
}

enum FeedbackCategory {
  "about_cooperation"
  about_cooperation
  "bug_report"
  bug_report
  "complaint"
  complaint
  "other"
  other
  "suggestion"
  suggestion
}

enum FeedbackStatus {
  "pending"
  pending
  "resolved"
  resolved
}

enum FeedbackSystem {
  "backoffice_web"
  backoffice_web
  "merchant_web"
  merchant_web
  "mobile"
  mobile
}

enum Gender {
  "female"
  female
  "male"
  male
  "undefined"
  undefined
}

enum GoalRepeat {
  "daily"
  daily
  "goal"
  goal
  "monthly"
  monthly
  "no_repeat"
  no_repeat
  "per_perform"
  per_perform
  "quarterly"
  quarterly
  "weekly"
  weekly
  "yearly"
  yearly
}

enum GuideAudienceKind {
  "admin"
  admin
  "everyone"
  everyone
  "merchant"
  merchant
  "user"
  user
}

enum GuideCategory {
  "article"
  article
  "faq"
  faq
  "file"
  file
  "video"
  video
}

enum IncomeEarners {
  four_plus
  single
  three
  two
  zero
}

enum Industry {
  "agriculture_mining_company"
  agriculture_mining_company
  "auto_repair_service"
  auto_repair_service
  "banking_insurance_nbfs"
  banking_insurance_nbfs
  "delivery_transportation_services"
  delivery_transportation_services
  "educational_institution"
  educational_institution
  "entertainment_cultural_services"
  entertainment_cultural_services
  "fitness_beauty_services"
  fitness_beauty_services
  "government_state_institutions"
  government_state_institutions
  "healthcare_spa_sanatoriums"
  healthcare_spa_sanatoriums
  "imported_goods_trading_organization"
  imported_goods_trading_organization
  "it_software_company"
  it_software_company
  "legal_services_notary"
  legal_services_notary
  "ngo_humanitarian_organization"
  ngo_humanitarian_organization
  "other"
  other
  "religious_organization"
  religious_organization
  "restaurant_food_production"
  restaurant_food_production
  "trade_company"
  trade_company
  "travel_agency_hotels"
  travel_agency_hotels
}

enum InvitationStatus {
  "accepted"
  accepted
  "expired"
  expired
  "pending"
  pending
  "rejected"
  rejected
}

enum InvoiceStatus {
  "cancelled"
  cancelled
  "overdue"
  overdue
  "paid"
  paid
  "pending"
  pending
}

enum JobId {
  accounting_finance_officer
  air_transportation
  architect
  artist
  broker
  consultant_analyst
  craftsmanship_artisan
  customer_service
  designer
  distributor
  doctor
  educator
  employee
  engineering
  entrepreneur
  executive
  farmer
  fisherman
  general_administration
  government_official_public_administrator
  hospitality_restaurant
  housewife
  informal_worker
  information_technology
  laborer
  land_transportation
  legal_lawyer_notary
  livestock_farmer
  maritime_transportation
  marketing
  medical_personnel
  military
  others
  police_officer
  researcher
  retired
  security
  student
}

enum JobTitleId {
  management_non_owner
  management_owner
  non_owner_authorized_representative_of_the_board
  non_owner_chairman
  non_owner_commissioner
  non_owner_director
  non_owner_general_chairman
  non_owner_others
  non_owner_president_commissioner
  non_owner_president_director
  non_owner_secretary
  non_owner_treasurer
  owner_authorized_representative_of_the_board
  owner_chairman
  owner_commissioner
  owner_director
  owner_general_chairman
  owner_non_management_owner
  owner_others
  owner_president_commissioner
  owner_president_director
  owner_public_shareholder
  owner_secretary
  owner_treasurer
}

enum KycState {
  AUTO_REJECTED
  BLACKLISTED
  CONTACT_INFO_APPROVED
  ESIGNATURE_VERIFIED
  FACE_COMPARE_FAILED
  FACE_COMPARE_MANUAL
  FACE_COMPARE_VERIFIED
  FACE_LIVENESS_FAILED
  FACE_LIVENESS_VERIFIED
  FREEZE
  IDENTITY_FAILED
  IDENTITY_SIGNATURE_FAILED
  INFO_APPROVED
  IN_PERSON_SIGNATURE_VERIFIED
  KYC_PROCESSING
  KYC_REJECTED
  KYC_VERIFIED
  PASSPORT_REJECTED
  PENDING
  REFUSED
  REJECTED
  REQUESTED
  RE_CREDIT_SCORE_CALCULATED
  SIGNATURE_FAILED
  VERIFIED
  WAITING_SIGNATURE_VERIFICATION
  WORKING_INFO_APPROVED
}

enum LastEducation {
  bachelor_degree_s1
  diploma_1_d1
  diploma_2_d2
  diploma_3_d3
  doctorate_s3
  master_degree_s2
  no_degree
  others
}

enum LoanModificationModifyType {
  "decrease"
  decrease
  "increase"
  increase
  "refund"
  refund
}

enum LoanModificationWithdrawStatus {
  "failed"
  failed
  "pending"
  pending
  "success"
  success
}

enum LoanModifyRequestReason {
  "Defective or Faulty"
  defective_or_faulty
  "Other"
  other
  "Product or Service Changed"
  product_or_service_changed
  "Quantity Mismatch"
  quantity_mismatch
}

enum LoanQuality {
  "normal"
  normal
  "overdue"
  overdue
}

enum LoanStatus {
  active
  canceled
  closed
  expired
  pending
  refund
  refunded
  rejected
  system_rejected
}

enum LoanZmsQuality {
  "bad"
  bad
  "doubtful"
  doubtful
  "special_mention"
  special_mention
  "standard"
  standard
  "substandard"
  substandard
}

enum MaritalStatus {
  "Divorced"
  divorced
  "In Certain Cases"
  in_certain_cases
  "Married"
  married
  "Registered Partnership"
  registered_partnership
  "Separated"
  separated
  "Single"
  single
  "Widowed"
  widowed
}

enum MaritalStatusIndonesia {
  "Divorced"
  divorced
  "Married"
  married
  "Separated"
  separated
  "Single"
  single
  "Widowed"
  widowed
}

enum MerchantUserRole {
  "merchant_manager"
  merchant_manager
  "store_manager"
  store_manager
  "store_seller"
  store_seller
}

enum MerchantUserStatus {
  "active"
  active
  "inactive"
  inactive
}

enum MethodStatus {
  "active"
  active
  "inactive"
  inactive
  "test"
  test
}

enum NewMaritalStatus {
  divorced
  domestic_partner
  married
  other
  single
  widowed
}

enum NumberOfChildren {
  "Five"
  five
  "Four"
  four
  "More Than Five"
  more_than_five
  "No Children"
  no_children
  "One"
  one
  "Three"
  three
  "Two"
  two
}

enum PaymentState {
  checkout
  completed
  failed
  pending
  processing
  refunded
  void
}

enum PenaltyCategory {
  "loss"
  loss
  "penalty"
  penalty
}

enum PenaltyStatus {
  "cancelled"
  cancelled
  "paid"
  paid
  "pending"
  pending
}

enum Pep {
  "non_politically_exposed_person"
  non_politically_exposed_person
  "politically_exposed_person"
  politically_exposed_person
  "related_politically_exposed_person"
  related_politically_exposed_person
}

enum PepRelation {
  "child"
  child
  "father_mother"
  father_mother
  "grandchild"
  grandchild
  "grandfather_grandmother"
  grandfather_grandmother
  "myself"
  myself
  "older_younger_sibling"
  older_younger_sibling
  "wife_husband"
  wife_husband
}

enum PepRelationMongolia {
  brother_sister
  grandchild
  grandmother_grandfather
  mother_father
  other
  son_daughter_in_law
  wife_husband
}

enum PepStatus {
  i_am
  no
  yes
}

enum Position {
  "ceo"
  ceo
  "division_director"
  division_director
  "head_of_department"
  head_of_department
  "intern_employee"
  intern_employee
  "manager"
  manager
  "other"
  other
  "senior"
  senior
  "specialist"
  specialist
}

enum PostalCode {
  dki_jaya
  kab_bandung
  kab_bandung_barat
  kab_bekasi
  kab_bogor
  kab_ciamis
  kab_cianjur
  kab_cirebon
  kab_garut
  kab_indramayu
  kab_karawang
  kab_kuningan
  kab_lebak
  kab_majalengka
  kab_pandeglang
  kab_pangandaran
  kab_purwakarta
  kab_serang
  kab_subang
  kab_sukabumi
  kab_sumedang
  kab_tangerang
  kab_tasikmalaya
  kota_bandung
  kota_banjar
  kota_bekasi
  kota_bogor
  kota_cilegon
  kota_cimahi
  kota_cirebon
  kota_depok
  kota_serang
  kota_sukabumi
  kota_tangerang
  kota_tangerang_selatan
  kota_tasikmalaya
  wil_kepulauan_seribu
  wil_kota_jakarta_barat
  wil_kota_jakarta_pusat
  wil_kota_jakarta_selatan
  wil_kota_jakarta_timur
  wil_kota_jakarta_utara
}

enum ProductStatus {
  "active"
  active
  "inactive"
  inactive
}

"Receive Confirmable token channel"
enum ReceiveTokenChannel {
  "email"
  email
  "phone"
  phone
}

enum Religion {
  buddha
  catholic
  confucianism
  hindu
  islam
  others
  protestant
}

enum ResidentOwnerStatus {
  "Community Property"
  community_property
  "Joint Tenancy"
  joint_tenancy
  "Partnership Owners"
  partnership_owners
  "Sole Ownership"
  sole_ownership
  "Tenancy in Common"
  tenancy_in_common
  "Trust Ownership"
  trust_ownership
}

enum RiskyAction {
  "change_email"
  change_email
  "change_password"
  change_password
  "change_phone"
  change_phone
  "change_pin"
  change_pin
}

enum SettlementStatus {
  "failed"
  failed
  "pending"
  pending
  "skipped"
  skipped
  "transferred"
  transferred
}

"Sort Direction"
enum SortDirection {
  "Ascending"
  asc
  "Descending"
  desc
}

enum Spouse {
  child
  colleague
  friend
  others
  parent
  relative
  sibling
}

enum StartingPeriod {
  "Five to Ten Years"
  five_to_ten_years
  "Less Than 1 Year"
  less_than_1_year
  "More Than Ten Years"
  more_than_ten_years
  "One to Three Years"
  one_to_three_years
  "Three to Five Years"
  three_to_five_years
}

enum Status {
  "active"
  active
  "banned"
  banned
  "deleted"
  deleted
  "inactive"
  inactive
  "pending"
  pending
  "suspended"
  suspended
}

enum TransactionCategory {
  "admin"
  admin
  "deposit"
  deposit
  "exchange"
  exchange
  "locked"
  locked
  "payment"
  payment
  "refund"
  refund
  "reward"
  reward
  "sales"
  sales
  "unlock"
  unlock
  "user_exchange"
  user_exchange
  "withdraw"
  withdraw
}

enum TransactionStatus {
  "authorized"
  authorized
  "pending"
  pending
  "rejected"
  rejected
}

enum TransactionWalletType {
  "fiat_wallet"
  fiat_wallet
  "settlement_wallet"
  settlement_wallet
  "spc_wallet"
  spc_wallet
}

enum UserContractStatus {
  "ACTIVE"
  active
  "EXPIRED"
  expired
  "INACTIVE"
  inactive
  "TERMINATED"
  terminated
}

enum VerificationStatus {
  "expired"
  expired
  "pending"
  pending
  "rejected"
  rejected
  "verified"
  verified
}

enum VirtualAccountPayment {
  "down_payment"
  down_payment
  "repayment"
  repayment
}

enum VirtualAccountStatus {
  "cancelled"
  cancelled
  "paid"
  paid
  "pending"
  pending
}

enum WalletStatus {
  "active"
  active
  "closed"
  closed
  "locked"
  locked
}

enum WalletTransactionTypeCode {
  "credit"
  credit
  "debit"
  debit
}

enum XacCreditScoreStatus {
  "amount_rejected"
  amount_rejected
  "cib_failed"
  cib_failed
  "confirmed"
  confirmed
  "expired"
  expired
  "fee_paid"
  fee_paid
  "fee_pending"
  fee_pending
  "limited"
  limited
  "org_rejected"
  org_rejected
  "overdue"
  overdue
  "rejected"
  rejected
  "scoring_rejected"
  scoring_rejected
  "started"
  started
  "system_failed"
  system_failed
  "unknown"
  unknown
  "used"
  used
}

"An ISO 8601-encoded date"
scalar ISO8601Date

"An ISO 8601-encoded datetime"
scalar ISO8601DateTime

"Represents untyped JSON"
scalar JSON

scalar Upload

input AccountFilter {
  bank: BankFilter
  bankId: IDFilter
  createdAt: DateFilter
  currency: StringFilter
  iban: StringFilter
  id: IDFilter
  isActive: BoolFilter
  isConfirm: BoolFilter
  isDefault: BoolFilter
  name: StringFilter
  number: StringFilter
  ownerId: IDFilter
  ownerType: StringFilter
  position: IntFilter
  region: RegionFilter
  regionId: IDFilter
  updatedAt: DateFilter
  user: UserFilter
}

input AddressInput {
  address: String
  apartment: String
  city: String
  coordinate: JSON
  countryId: ID
  districtId: ID
  districtName: String
  "ID"
  id: ID
  latitude: String
  longitude: String
  postalCode: String
  quarterId: ID
  quarterName: String
  stateId: ID
  street: String
  village: String
  what3words: String
  zipCode: String
}

input AgreementFilter {
  audienceKind: EnumStringFilter
  category: EnumStringFilter
  createdAt: DateFilter
  id: IDFilter
  isActive: BoolFilter
  title: StringFilter
  updatedAt: DateFilter
}

input ApiLogFilter {
  createdAt: DateFilter
  id: IDFilter
  requestAt: DateFilter
  requestMethod: StringFilter
  responseAt: DateFilter
  targetId: IntFilter
  targetType: StringFilter
  updatedAt: DateFilter
  url: StringFilter
}

input AppVersionFilter {
  createdAt: DateFilter
  deepLink: StringFilter
  id: IDFilter
  os: StringFilter
  updatedAt: DateFilter
  version: StringFilter
}

input ArticleArticleFilter {
  author: UserFilter
  authorId: IDFilter
  category: ArticleCategoryFilter
  categoryId: IDFilter
  createdAt: DateFilter
  id: IDFilter
  publishedAt: DateFilter
  region: RegionFilter
  regionId: IDFilter
  source: StringFilter
  status: EnumStringFilter
  title: StringFilter
  updatedAt: DateFilter
}

input ArticleCategoryFilter {
  createdAt: DateFilter
  id: IDFilter
  isActive: BoolFilter
  isGlobal: BoolFilter
  name: StringFilter
  position: IntFilter
  region: RegionFilter
  regionId: IDFilter
  updatedAt: DateFilter
}

input AttachmentFilter {
  blob: BlobFilter
  createdAt: DateFilter
  id: IDFilter
  name: StringFilter
  recordId: IDFilter
  recordType: StringFilter
  updatedAt: DateFilter
}

input BankFilter {
  code: StringFilter
  createdAt: DateFilter
  id: IDFilter
  isActive: BoolFilter
  name: StringFilter
  swiftCode: StringFilter
  updatedAt: DateFilter
}

input BankTransferFilter {
  accountName: StringFilter
  accountNumber: StringFilter
  amount: IntFilter
  bankCode: StringFilter
  cgwId: IDFilter
  createdAt: DateFilter
  currency: StringFilter
  description: StringFilter
  dueDate: DateFilter
  id: IDFilter
  number: StringFilter
  status: EnumStringFilter
  targetId: IDFilter
  targetType: StringFilter
  updatedAt: DateFilter
}

input BannerFilter {
  createdAt: DateFilter
  expiresAt: DateFilter
  id: IDFilter
  name: StringFilter
  page: StringFilter
  region: RegionFilter
  regionId: IDFilter
  status: BoolFilter
  updatedAt: DateFilter
}

input BlobFilter {
  byteSize: IntFilter
  contentType: StringFilter
  createdAt: DateFilter
  filename: StringFilter
  id: IDFilter
  updatedAt: DateFilter
}

input BoolFilter {
  "equals to"
  eq: Boolean
  "not equals to"
  notEq: Boolean
  "is null ?"
  notNull: Boolean
  "is null ?"
  null: Boolean
}

input CGWFilter {
  createdAt: DateFilter
  id: IDFilter
  isCredit: BoolFilter
  name: StringFilter
  status: EnumStringFilter
  transferAccount: StringFilter
  updatedAt: DateFilter
}

input CategoryFilter {
  ancestry: StringFilter
  createdAt: DateFilter
  id: IDFilter
  name: StringFilter
  updatedAt: DateFilter
}

input ContractFilter {
  createdAt: DateFilter
  description: StringFilter
  documentTemplateId: IDFilter
  id: IDFilter
  name: StringFilter
  regionId: IDFilter
  signedAt: DateFilter
  status: EnumStringFilter
  updatedAt: DateFilter
  userId: IDFilter
}

input CountryFilter {
  createdAt: DateFilter
  id: IDFilter
  isoName: StringFilter
  name: StringFilter
  updatedAt: DateFilter
}

input CurrencyRateFilter {
  baseCurrency: StringFilter
  createdAt: DateFilter
  currency: StringFilter
  id: IDFilter
  rate: IntFilter
  rateDate: DateFilter
  updatedAt: DateFilter
  user: UserFilter
}

input DateFilter {
  "equals to"
  eq: String
  "Greater than"
  gt: String
  "Greater than or equals"
  gteq: String
  "Less than"
  lt: String
  "Less than or equals"
  lteq: String
  "not equals to"
  notEq: String
  "is null ?"
  notNull: Boolean
  "is null ?"
  null: Boolean
}

input DeviceFilter {
  channel: EnumStringFilter
  confirmed: BoolFilter
  confirmedAt: DateFilter
  createdAt: DateFilter
  deviceId: StringFilter
  id: IDFilter
  ip: StringFilter
  name: StringFilter
  updatedAt: DateFilter
  user: UserFilter
  userId: IDFilter
}

input DocumentTemplateFilter {
  classifications: EnumStringFilter
  createdAt: DateFilter
  description: StringFilter
  id: IDFilter
  name: StringFilter
  status: EnumStringFilter
  updatedAt: DateFilter
}

input EnumStringFilter {
  "equals to"
  eq: String
  "in: Matches any values in giver array"
  in: [String!]
  "not equals to"
  notEq: String
  "in: Matches none of values in giver array"
  notIn: [String!]
  "is null ?"
  notNull: Boolean
  "is null ?"
  null: Boolean
}

input FaqFilter {
  createdAt: DateFilter
  id: IDFilter
  question: StringFilter
  updatedAt: DateFilter
}

input GamificationFilter {
  active: BoolFilter
  createdAt: DateFilter
  expiresAt: DateFilter
  id: IDFilter
  name: StringFilter
  region: RegionFilter
  startsAt: DateFilter
  updatedAt: DateFilter
  visible: BoolFilter
}

input GamificationProgressFilter {
  amount: IntFilter
  amountChange: IntFilter
  createdAt: DateFilter
  cycle: StringFilter
  date: DateFilter
  gamification: GamificationFilter
  gamificationId: IDFilter
  id: IDFilter
  percentage: IntFilter
  percentageChange: IntFilter
  updatedAt: DateFilter
}

input GuideFilter {
  audienceKind: EnumStringFilter
  category: EnumStringFilter
  createdAt: DateFilter
  id: IDFilter
  title: StringFilter
  updatedAt: DateFilter
}

input IDFilter {
  "is null ?"
  blank: Boolean
  "equals to"
  eq: ID
  "Greater than"
  gt: Int
  "Greater than or equals"
  gteq: Int
  "in: Matches any values in giver array"
  in: [ID!]
  "Less than"
  lt: Int
  "Less than or equals"
  lteq: Int
  "not equals to"
  notEq: ID
  "in: Matches none of values in giver array"
  notIn: [ID!]
  "Starts with"
  start: Int
}

input IntFilter {
  "is blank ?"
  blank: Boolean
  "equals to"
  eq: Float
  "Greater than"
  gt: Float
  "Greater than or equals"
  gteq: Float
  "in: Matches none of values in giver array"
  in: [Float!]
  "Less than"
  lt: Float
  "Less than or equals"
  lteq: Float
  "not equals to"
  notEq: Float
  "in: Matches none of values in giver array"
  notIn: [Float!]
  "is null ?"
  null: Boolean
}

input InterestFilter {
  amount: IntFilter
  balance: IntFilter
  category: StringFilter
  createdAt: DateFilter
  id: IDFilter
  interestDate: DateFilter
  loan: LoanFilter
  loanId: IDFilter
  principal: IntFilter
  product: ProductFilter
  productId: IDFilter
  rate: IntFilter
  status: StringFilter
  updatedAt: DateFilter
  user: UserFilter
  userId: IDFilter
}

input InvitationFilter {
  createdAt: DateFilter
  email: StringFilter
  id: IDFilter
  invitableId: IDFilter
  invitableType: StringFilter
  inviteeId: IDFilter
  inviteeType: StringFilter
  inviterId: IDFilter
  inviterType: StringFilter
  role: EnumStringFilter
  status: EnumStringFilter
  type: StringFilter
  updatedAt: DateFilter
}

input InvoiceFilter {
  amount: IntFilter
  createdAt: DateFilter
  id: IDFilter
  loan: LoanFilter
  merchant: MerchantFilter
  number: StringFilter
  overdueDays: IntFilter
  payDate: DateFilter
  product: ProductFilter
  status: EnumStringFilter
  store: StoreFilter
  updatedAt: DateFilter
  user: UserFilter
}

input LoanFilter {
  amount: IntFilter
  balance: IntFilter
  canceledAt: DateFilter
  category: CategoryFilter
  closedAt: DateFilter
  confirmedAt: DateFilter
  createdAt: DateFilter
  currency: StringFilter
  description: StringFilter
  endDate: DateFilter
  expiredAt: DateFilter
  externalId: StringFilter
  fareAmount: IntFilter
  id: IDFilter
  merchant: MerchantFilter
  merchantId: IDFilter
  merchantUser: MerchantUserFilter
  number: StringFilter
  overdueDays: IntFilter
  paidAmount: IntFilter
  product: ProductFilter
  productId: IDFilter
  quality: EnumStringFilter
  refundedAt: DateFilter
  registerNum: StringFilter
  rejectedAt: DateFilter
  riskScore: IntFilter
  settled: BoolFilter
  settlementId: IDFilter
  startDate: DateFilter
  status: EnumStringFilter
  store: StoreFilter
  storeContractNumber: StringFilter
  storeFeePercent: IntFilter
  storeId: IDFilter
  taxAmount: IntFilter
  totalPenalty: IntFilter
  type: StringFilter
  updatedAt: DateFilter
  user: UserFilter
  userId: IDFilter
  writeOff: BoolFilter
}

input LoanModificationVerificationFilter {
  createdAt: DateFilter
  expiresAt: DateFilter
  id: IDFilter
  loanMerchantId: StringFilter
  loanNumber: StringFilter
  loanStoreId: StringFilter
  merchantId: IDFilter
  number: StringFilter
  requester: UserFilter
  requesterId: IDFilter
  respondAt: DateFilter
  responder: UserFilter
  responderId: IDFilter
  status: EnumStringFilter
  targetId: IDFilter
  targetType: StringFilter
  token: StringFilter
  type: StringFilter
  updatedAt: DateFilter
}

input LoyaltyCategoryFilter {
  active: BoolFilter
  createdAt: DateFilter
  id: IDFilter
  isB2b: BoolFilter
  name: StringFilter
  updatedAt: DateFilter
  users: UserFilter
}

input MerchantFilter {
  categoryId: IDFilter
  categoryName: StringFilter
  contractNumber: StringFilter
  contractStatus: EnumStringFilter
  contractType: EnumStringFilter
  createdAt: DateFilter
  email: StringFilter
  feePercent: IntFilter
  id: IDFilter
  isGoFresh: BoolFilter
  isShow: BoolFilter
  name: StringFilter
  phone: StringFilter
  regionId: IDFilter
  register: StringFilter
  settlementDay: IntFilter
  updatedAt: DateFilter
}

input MerchantUserFilter {
  createdAt: DateFilter
  id: IDFilter
  merchant: MerchantFilter
  merchantId: IDFilter
  role: EnumStringFilter
  status: EnumStringFilter
  store: StoreFilter
  storeId: IDFilter
  updatedAt: DateFilter
  user: UserFilter
  userId: IDFilter
}

input MerchantsCategoryFilter {
  category: CategoryFilter
  categoryId: IDFilter
  createdAt: DateFilter
  id: IDFilter
  merchant: MerchantFilter
  merchantId: IDFilter
  updatedAt: DateFilter
}

input ModificationsFilter {
  amount: IntFilter
  createdAt: DateFilter
  id: IDFilter
  loan: LoanFilter
  loanId: IDFilter
  merchant: MerchantFilter
  merchantId: IDFilter
  modifyType: EnumStringFilter
  number: StringFilter
  settled: BoolFilter
  store: StoreFilter
  storeId: IDFilter
  updatedAt: DateFilter
  user: UserFilter
  userId: IDFilter
  withdrawStatus: EnumStringFilter
}

input PaymentMethodFilter {
  createdAt: DateFilter
  currency: StringFilter
  description: StringFilter
  id: IDFilter
  name: StringFilter
  region: RegionFilter
  regionId: IDFilter
  status: EnumStringFilter
  type: StringFilter
  updatedAt: DateFilter
}

input PaymentSourceFilter {
  createdAt: DateFilter
  id: IDFilter
  idx: StringFilter
  idx2: StringFilter
  region: RegionFilter
  updatedAt: DateFilter
  user: UserFilter
}

input PhoneFilter {
  createdAt: DateFilter
  id: IDFilter
  phone: StringFilter
  updatedAt: DateFilter
}

input ProductFilter {
  advancePercent: IntFilter
  createdAt: DateFilter
  dedicatedClass: StringFilter
  divisionPeriod: IntFilter
  duration: IntFilter
  hasAdvance: BoolFilter
  id: IDFilter
  isAdvanceSpc: BoolFilter
  isLockSpc: BoolFilter
  maxLoanAmount: IntFilter
  minLoanAmount: IntFilter
  name: StringFilter
  status: EnumStringFilter
  updatedAt: DateFilter
}

input RegionFilter {
  createdAt: DateFilter
  id: IDFilter
  name: StringFilter
  updatedAt: DateFilter
}

input SortFilter {
  direction: SortDirection
  field: String!
}

input SpFileFilter {
  byteSize: IntFilter
  contentType: StringFilter
  createdAt: DateFilter
  filename: StringFilter
  id: IDFilter
  updatedAt: DateFilter
}

input StoreFilter {
  bank: BankFilter
  bankAccount: AccountFilter
  code: StringFilter
  contractNumber: StringFilter
  contractStatus: EnumStringFilter
  contractType: StringFilter
  createdAt: DateFilter
  email: StringFilter
  feePercent: IntFilter
  id: IDFilter
  isActive: BoolFilter
  isAirline: BoolFilter
  isLockSpc: StringFilter
  isOnlyPremium: StringFilter
  isShow: StringFilter
  merchant: MerchantFilter
  merchantId: IDFilter
  merchantName: StringFilter
  name: StringFilter
  phone: StringFilter
  register: StringFilter
  riskScore: IntFilter
  settlementDay: IntFilter
  settlementTransferType: EnumStringFilter
  updatedAt: DateFilter
}

input StringFilter {
  "is blank ?"
  blank: Boolean
  "contains"
  cont: String
  "ends with"
  end: String
  "equals to"
  eq: String
  "in: Matches any values in giver array"
  in: [String!]
  "not contains"
  notCont: String
  "not equals to"
  notEq: String
  "in: Matches none of values in giver array"
  notIn: [String!]
  "is null ?"
  notNull: Boolean
  "is null ?"
  null: Boolean
  "starts with"
  start: String
}

input TagFilter {
  createdAt: DateFilter
  id: IDFilter
  name: StringFilter
  status: BoolFilter
  updatedAt: DateFilter
}

input TransactionFilter {
  amount: IntFilter
  balance: IntFilter
  category: UserFilter
  createdAt: DateFilter
  description: StringFilter
  id: IDFilter
  number: StringFilter
  typeCode: EnumStringFilter
  updatedAt: DateFilter
}

input UserDocumentationFilter {
  createdAt: DateFilter
  id: IDFilter
  name: StringFilter
  updatedAt: DateFilter
}

input UserFilter {
  citizenIdNumber: StringFilter
  civilId: StringFilter
  confirmed: BoolFilter
  confirmedAt: DateFilter
  createdAt: DateFilter
  email: StringFilter
  firstName: StringFilter
  fullName: StringFilter
  gender: EnumStringFilter
  id: IDFilter
  isCompany: BoolFilter
  isSpecial: BoolFilter
  lastName: StringFilter
  loyaltyCategory: LoyaltyCategoryFilter
  loyaltyCategoryId: IDFilter
  phone: StringFilter
  resetPass: BoolFilter
  riskScore: IntFilter
  state: EnumStringFilter
  status: EnumStringFilter
  updatedAt: DateFilter
  userRoleId: IDFilter
  username: StringFilter
}

"Autogenerated input type of UserUpdate"
input UserUpdateInput {
  address: AddressInput
  avatar: Upload
  birthday: ISO8601Date
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  email: String
  faceIdToken: String
  familyName: String
  firstName: String
  lastName: String
  locale: String
  middleName: String
  mobile: String
  username: String
}

input VerificationFilter {
  createdAt: DateFilter
  expiresAt: DateFilter
  id: IDFilter
  merchantId: IDFilter
  number: StringFilter
  requester: UserFilter
  requesterId: IDFilter
  respondAt: DateFilter
  responder: UserFilter
  responderId: IDFilter
  status: EnumStringFilter
  targetId: IDFilter
  targetType: StringFilter
  token: StringFilter
  type: StringFilter
  updatedAt: DateFilter
}

input WalletFilter {
  availableAmount: IntFilter
  balance: IntFilter
  createdAt: DateFilter
  freezeAmount: IntFilter
  id: IDFilter
  merchantName: StringFilter
  name: StringFilter
  ownerId: IDFilter
  ownerType: StringFilter
  status: EnumStringFilter
  storeName: StringFilter
  type: StringFilter
  updatedAt: DateFilter
}

input WalletTransactionFilter {
  accountNumber: StringFilter
  amount: IntFilter
  archived: BoolFilter
  authorizedAt: DateFilter
  authorizedById: IDFilter
  balance: IntFilter
  bankTransfer: BankTransferFilter
  category: EnumStringFilter
  createdAt: DateFilter
  date: DateFilter
  description: StringFilter
  dueDate: DateFilter
  id: IDFilter
  merchantName: StringFilter
  number: StringFilter
  sourceId: IDFilter
  sourceType: StringFilter
  status: EnumStringFilter
  storeName: StringFilter
  transactionAt: DateFilter
  typeCode: EnumStringFilter
  updatedAt: DateFilter
  wallet: WalletFilter
  walletId: IDFilter
  walletTransactionId: IDFilter
  walletType: EnumStringFilter
  withdrawTransaction: WalletTransactionFilter
}

input XacCreditScoreFilter {
  amount: IntFilter
  createdAt: DateFilter
  expiresAt: DateFilter
  feeAmount: IntFilter
  feePaidAt: DateFilter
  id: IDFilter
  loan: LoanFilter
  status: EnumStringFilter
  updatedAt: DateFilter
  user: UserFilter
  userId: IDFilter
}

"Autogenerated input type of addressCreate"
input addressCreateInput {
  address: String
  apartment: String
  city: String
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  countryId: ID
  districtId: ID
  latitude: String
  longitude: String
  ownerId: ID!
  postalCode: String
  preferences: JSON
  quarterId: ID!
  stateId: ID
  street: String
  village: String
  villageId: ID
  what3words: String
  zipCode: String
}

"Autogenerated input type of agreementAccept"
input agreementAcceptInput {
  agreementId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  version: Int!
}

"Autogenerated input type of bankAccountCreate"
input bankAccountCreateInput {
  bankId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currency: String
  isActive: Boolean
  isConfirm: Boolean
  isDefault: Boolean
  name: String!
  number: String!
  ownerId: ID!
  position: Int
}

"Autogenerated input type of bankAccountDeactivate"
input bankAccountDeactivateInput {
  bankId: ID!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID!
}

"Autogenerated input type of bankAccountDestroy"
input bankAccountDestroyInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID!
}

"Autogenerated input type of bankAccountMakeDefault"
input bankAccountMakeDefaultInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID!
}

"Autogenerated input type of bankAccountUpdate"
input bankAccountUpdateInput {
  bankId: ID
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currency: String
  id: ID!
  isActive: Boolean
  isConfirm: Boolean
  isDefault: Boolean
  name: String
  number: String
  ownerId: ID
  ownerType: String
  position: Int
  preferences: JSON
  regionId: ID
}

"Autogenerated input type of checkAccountName"
input checkAccountNameInput {
  accountNumber: String!
  bankCode: String
  bankId: ID
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  ownerType: String
}

"Autogenerated input type of confirmableConfirm"
input confirmableConfirmInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID!
  token: String!
}

"Autogenerated input type of confirmableResend"
input confirmableResendInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID!
}

"Autogenerated input type of createBiometric"
input createBiometricInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  publicKey: String!
}

"Autogenerated input type of creditScoreCalculation"
input creditScoreCalculationInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  regionId: ID!
  userId: ID!
}

"Autogenerated input type of emailRegister"
input emailRegisterInput {
  appScreen: String
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  email: String!
  id: ID
}

"Autogenerated input type of feedbackCreate"
input feedbackCreateInput {
  category: FeedbackCategory!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  description: String
  followUpConsent: Boolean!
  merchantId: ID
  preferences: JSON!
  senderId: ID!
  systemType: FeedbackSystem!
}

"Autogenerated input type of generateCheckSum"
input generateCheckSumInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  data: String!
}

"Autogenerated input type of invoiceOverdue"
input invoiceOverdueInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID
}

"Autogenerated input type of invoicePay"
input invoicePayInput {
  amount: Float
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID
}

"Autogenerated input type of kycCheckOtpMongolia"
input kycCheckOtpMongoliaInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID!
  otp: String!
}

"Autogenerated input type of kycCreateForIndonesia"
input kycCreateForIndonesiaInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  firstName: String
  ktp: Upload
  lastName: String
  nik: String
}

"Autogenerated input type of kycCreateForMongolia"
input kycCreateForMongoliaInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  ktp: Upload
  nik: String
  selfie: Upload
  signature: Upload
}

"Autogenerated input type of kycCreateForOtpMongolia"
input kycCreateForOtpMongoliaInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  nik: String
}

"Autogenerated input type of kycCreateForVietnam"
input kycCreateForVietnamInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of kycDestroy"
input kycDestroyInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID!
}

"Autogenerated input type of kycExecuteResult"
input kycExecuteResultInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID!
  sessionId: String!
}

"Autogenerated input type of kycFaceCompare"
input kycFaceCompareInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID!
  targetKey: String!
}

"Autogenerated input type of kycLivenessCheckForBss"
input kycLivenessCheckForBssInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  firstImage: Upload!
  id: ID!
  secondImage: Upload!
}

"Autogenerated input type of kycOtpGenerateMongolia"
input kycOtpGenerateMongoliaInput {
  channel: String!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID!
}

"Autogenerated input type of kycRecreateForMongolia"
input kycRecreateForMongoliaInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of kycUpdateForIndonesia"
input kycUpdateForIndonesiaInput {
  bloodType: String
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  companyAddress: String
  companyName: String
  contactRelation: ContactRelation
  department: String
  education: Education
  emergencyContactName: String
  emergencyContactPhone: String
  id: ID!
  industry: String
  maritalStatus: MaritalStatus
  nationality: String
  numberOfChildren: NumberOfChildren
  passportAddress: String
  placeOfBirth: String
  position: String
  preferences: JSON
  religion: String
  residentOwnerStatus: ResidentOwnerStatus
  rtRw: String
  salaryIncome: Float
  startingPeriod: StartingPeriod
}

"Autogenerated input type of kycUpdateForMongolia"
input kycUpdateForMongoliaInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  companyAddress: String
  companyName: String
  contactRelation: ContactRelation
  contactRelationTwo: ContactRelationTwo
  department: String
  education: Education
  emergencyContactName: String
  emergencyContactNameTwo: String
  emergencyContactPhone: String
  emergencyContactPhoneTwo: String
  emergencyContactSurname: String
  emergencyContactSurnameTwo: String
  emergencyContacts: JSON
  emergencyRelation: EmergencyRelation
  familyIncome: FamilyIncome
  id: ID!
  incomeEarners: IncomeEarners
  industry: String
  ktp: Upload
  maritalStatus: MaritalStatus
  newMaritalStatus: NewMaritalStatus
  numberOfChildren: NumberOfChildren
  passportImage: Upload
  pepOrg: String
  pepPosition: String
  pepRelation: PepRelationMongolia
  pepStatus: PepStatus
  position: String
  preferences: JSON
  residentOwnerStatus: ResidentOwnerStatus
  salaryIncome: Float
  selfie: Upload
  signature: Upload
  startingPeriod: StartingPeriod
}

"Autogenerated input type of kycUserIdConfirmationForBss"
input kycUserIdConfirmationForBssInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID!
}

"Autogenerated input type of kycUserInformationFormForBss"
input kycUserInformationFormForBssInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID!
}

"Autogenerated input type of loanActivateWithoutAdvance"
input loanActivateWithoutAdvanceInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID!
}

"Autogenerated input type of loanCancel"
input loanCancelInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID!
}

"Autogenerated input type of loanCreateByMerchant"
input loanCreateByMerchantInput {
  amount: Float!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  description: String
  phone: String!
  preferences: JSON
  storeId: ID!
}

"Autogenerated input type of loanCreate"
input loanCreateInput {
  accountNumber: String
  amount: Float!
  callbackUrl: String
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  description: String
  merchantUserId: ID
  productId: ID!
  requestId: String
  storeId: ID!
}

"Autogenerated input type of loanLongCheck"
input loanLongCheckInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID!
}

"Autogenerated input type of loanModificationVerificationCreate"
input loanModificationVerificationCreateInput {
  airlineFareAmount: Float
  airlinePassengers: JSON
  airlineTaxAmount: Float
  amount: Float!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  description: String
  loanAmount: Float!
  loanId: ID!
  loanNumber: String!
  logoUrl: String
  merchantId: ID!
  merchantName: String!
  modifyType: LoanModificationModifyType!
  purchaseDate: String!
  requestReason: LoanModifyRequestReason
  requesterId: ID!
  responderId: ID!
  storeName: String!
}

"Autogenerated input type of loanReject"
input loanRejectInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  description: String
  id: ID!
  isSystem: Boolean
}

"Autogenerated input type of loanUpdate"
input loanUpdateInput {
  amount: Float
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  description: String
  id: ID!
  productId: ID
  type: String
}

"Autogenerated input type of loanVerify"
input loanVerifyInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  firstPaymentDate: ISO8601Date
  id: ID!
  params: JSON
  productId: ID!
}

"Autogenerated input type of loanWithdraw"
input loanWithdrawInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  modificationId: ID!
  userBankAccountId: ID!
}

"Autogenerated input type of mobileRegister"
input mobileRegisterInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID
  phone: String!
}

"Autogenerated input type of passwordChange"
input passwordChangeInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  confirmPassword: String!
  currentPassword: String!
  newPassword: String!
}

"Autogenerated input type of passwordCheck"
input passwordCheckInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentPassword: String!
}

"Autogenerated input type of passwordForget"
input passwordForgetInput {
  appScreen: String
  channel: ReceiveTokenChannel!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  identify: String!
}

"Autogenerated input type of passwordRegisterForIndonesia"
input passwordRegisterForIndonesiaInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  confirmPassword: String!
  emailSid: ID!
  locale: String
  password: String!
  regionId: ID
  userId: ID!
}

"Autogenerated input type of passwordRegister"
input passwordRegisterInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  confirmPassword: String!
  emailSid: ID!
  locale: String
  password: String!
  phoneSid: ID!
  regionId: ID
}

"Autogenerated input type of passwordReset"
input passwordResetInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  confirmPassword: String!
  confirmationId: ID!
  newPassword: String!
}

"Autogenerated input type of paymentPaymentCapture"
input paymentPaymentCaptureInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID!
}

"Autogenerated input type of paymentPaymentCreate"
input paymentPaymentCreateInput {
  amount: Float
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  methodId: ID!
  params: JSON
  targetId: ID!
}

"Autogenerated input type of registerFcmToken"
input registerFcmTokenInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  deviceModel: String!
  deviceOs: String!
  subscribed: Boolean!
  subscriptionId: String!
}

"Autogenerated input type of registerSubId"
input registerSubIdInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  deviceModel: String!
  deviceOs: String!
  subscribed: Boolean!
  subscriptionId: String!
}

"Autogenerated input type of sendOtpByEmailForIndonesia"
input sendOtpByEmailForIndonesiaInput {
  appScreen: String
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  email: String!
  id: ID
}

"Autogenerated input type of sendOtpByPhoneForIndonesia"
input sendOtpByPhoneForIndonesiaInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID
  phone: String!
  regionId: ID
}

"Autogenerated input type of signUserContract"
input signUserContractInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of spcTransfer"
input spcTransferInput {
  amount: Float!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  destination: String!
  source: String!
}

"Autogenerated input type of spcWithdraw"
input spcWithdrawInput {
  accountNumber: String!
  amount: Float!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  walletId: ID
}

"Autogenerated input type of userChangeState"
input userChangeStateInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  note: String
  state: KycState!
  userId: ID!
}

"Autogenerated input type of userCheckOtpForRiskyAction"
input userCheckOtpForRiskyActionInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID!
  otp: String!
}

"Autogenerated input type of userCreate"
input userCreateInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  faceIdToken: String
  firstName: String!
  invitationToken: String!
  lastName: String!
  password: String!
  phoneSid: ID!
  regionId: ID!
  username: String
}

"Autogenerated input type of userDelete"
input userDeleteInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  password: String
}

"Autogenerated input type of userDeviceDestroy"
input userDeviceDestroyInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID!
}

"Autogenerated input type of userDeviceSendOtp"
input userDeviceSendOtpInput {
  appScreen: String
  channel: DeviceChannel!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  deviceId: String!
}

"Autogenerated input type of userDisable"
input userDisableInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  email: String!
}

"Autogenerated input type of userFaceCompareForRiskyAction"
input userFaceCompareForRiskyActionInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  sessionId: String!
}

"Autogenerated input type of userFindByPhone"
input userFindByPhoneInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  phone: String!
}

"Autogenerated input type of userGenerateReference"
input userGenerateReferenceInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  pinCode: String
  userId: ID
}

"Autogenerated input type of userGetStatements"
input userGetStatementsInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  statementId: String!
  userId: ID
}

"Autogenerated input type of userLoanModificationRespond"
input userLoanModificationRespondInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID!
  respondStatus: VerificationStatus!
}

"Autogenerated input type of userPinCheck"
input userPinCheckInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  pin: String!
  userId: ID!
}

"Autogenerated input type of userPinCreate"
input userPinCreateInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  pin: String!
  userId: ID
}

"Autogenerated input type of userPinForget"
input userPinForgetInput {
  appScreen: String
  channel: ReceiveTokenChannel!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  userId: ID!
}

"Autogenerated input type of userReCreateStatements"
input userReCreateStatementsInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  statementId: String!
  userId: ID
}

"Autogenerated input type of userReadyForRekognition"
input userReadyForRekognitionInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of userRequestCreditScore"
input userRequestCreditScoreInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  userId: ID
}

"Autogenerated input type of userRiskyAction"
input userRiskyActionInput {
  actionName: RiskyAction!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of validateOtpEmailForIndonesia"
input validateOtpEmailForIndonesiaInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID!
  token: String!
}

"Autogenerated input type of validateOtpForIndonesia"
input validateOtpForIndonesiaInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID
  phone: String!
  token: String!
}

"Autogenerated input type of verificationRespond"
input verificationRespondInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID!
  respond: VerificationStatus!
  respondReason: String
}

"Autogenerated input type of virtualAccountDestroy"
input virtualAccountDestroyInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID!
}

"Autogenerated input type of walletCryptoTransactionCreate"
input walletCryptoTransactionCreateInput {
  amount: Float!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  description: String
  destinationWalletId: ID!
  source: String!
  status: String
  walletId: ID!
}

"Autogenerated input type of xacCalculate"
input xacCalculateInput {
  amount: Float!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of xacChangeCreditAccount"
input xacChangeCreditAccountInput {
  account: String!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID!
}

"Autogenerated input type of xacCreditScoreCreate"
input xacCreditScoreCreateInput {
  address: String!
  businessSector: String!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentAccount: String!
  joblessMembers: String!
  userId: ID
  workspan: String!
}

"Autogenerated input type of xacCreditScoreRecalculate"
input xacCreditScoreRecalculateInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID!
}

"Autogenerated input type of xacCreditScoreStatusCheck"
input xacCreditScoreStatusCheckInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID!
}

"Autogenerated input type of xacFindOrCreateAccounts"
input xacFindOrCreateAccountsInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of xacKycCheck"
input xacKycCheckInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}

"Autogenerated input type of xacLoanInvoiceCreate"
input xacLoanInvoiceCreateInput {
  amount: Float!
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID!
}
